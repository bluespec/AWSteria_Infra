//
// Generated by Bluespec Compiler (build 0fccbb13)
//
//
// Ports:
// Name                         I/O  size props
// host_AXI4_S_awready            O     1 reg
// host_AXI4_S_wready             O     1 reg
// host_AXI4_S_bvalid             O     1 reg
// host_AXI4_S_bid                O    16 reg
// host_AXI4_S_bresp              O     2 reg
// host_AXI4_S_arready            O     1 reg
// host_AXI4_S_rvalid             O     1 reg
// host_AXI4_S_rid                O    16 reg
// host_AXI4_S_rdata              O   512 reg
// host_AXI4_S_rresp              O     2 reg
// host_AXI4_S_rlast              O     1 reg
// host_AXI4L_S_awready           O     1 reg
// host_AXI4L_S_wready            O     1 reg
// host_AXI4L_S_bvalid            O     1 reg
// host_AXI4L_S_bresp             O     2 reg
// host_AXI4L_S_arready           O     1 reg
// host_AXI4L_S_rvalid            O     1 reg
// host_AXI4L_S_rresp             O     2 reg
// host_AXI4L_S_rdata             O    32 reg
// ddr4_A_M_awvalid               O     1 reg
// ddr4_A_M_awid                  O    16 reg
// ddr4_A_M_awaddr                O    64 reg
// ddr4_A_M_awlen                 O     8 reg
// ddr4_A_M_awsize                O     3 reg
// ddr4_A_M_awburst               O     2 reg
// ddr4_A_M_awlock                O     1 reg
// ddr4_A_M_awcache               O     4 reg
// ddr4_A_M_awprot                O     3 reg
// ddr4_A_M_awqos                 O     4 reg
// ddr4_A_M_awregion              O     4 reg
// ddr4_A_M_wvalid                O     1 reg
// ddr4_A_M_wdata                 O   512 reg
// ddr4_A_M_wstrb                 O    64 reg
// ddr4_A_M_wlast                 O     1 reg
// ddr4_A_M_bready                O     1 reg
// ddr4_A_M_arvalid               O     1 reg
// ddr4_A_M_arid                  O    16 reg
// ddr4_A_M_araddr                O    64 reg
// ddr4_A_M_arlen                 O     8 reg
// ddr4_A_M_arsize                O     3 reg
// ddr4_A_M_arburst               O     2 reg
// ddr4_A_M_arlock                O     1 reg
// ddr4_A_M_arcache               O     4 reg
// ddr4_A_M_arprot                O     3 reg
// ddr4_A_M_arqos                 O     4 reg
// ddr4_A_M_arregion              O     4 reg
// ddr4_A_M_rready                O     1 reg
// ddr4_B_M_awvalid               O     1 reg
// ddr4_B_M_awid                  O    16 reg
// ddr4_B_M_awaddr                O    64 reg
// ddr4_B_M_awlen                 O     8 reg
// ddr4_B_M_awsize                O     3 reg
// ddr4_B_M_awburst               O     2 reg
// ddr4_B_M_awlock                O     1 reg
// ddr4_B_M_awcache               O     4 reg
// ddr4_B_M_awprot                O     3 reg
// ddr4_B_M_awqos                 O     4 reg
// ddr4_B_M_awregion              O     4 reg
// ddr4_B_M_wvalid                O     1 reg
// ddr4_B_M_wdata                 O   512 reg
// ddr4_B_M_wstrb                 O    64 reg
// ddr4_B_M_wlast                 O     1 reg
// ddr4_B_M_bready                O     1 reg
// ddr4_B_M_arvalid               O     1 reg
// ddr4_B_M_arid                  O    16 reg
// ddr4_B_M_araddr                O    64 reg
// ddr4_B_M_arlen                 O     8 reg
// ddr4_B_M_arsize                O     3 reg
// ddr4_B_M_arburst               O     2 reg
// ddr4_B_M_arlock                O     1 reg
// ddr4_B_M_arcache               O     4 reg
// ddr4_B_M_arprot                O     3 reg
// ddr4_B_M_arqos                 O     4 reg
// ddr4_B_M_arregion              O     4 reg
// ddr4_B_M_rready                O     1 reg
// ddr4_C_M_awvalid               O     1 const
// ddr4_C_M_awid                  O    16 const
// ddr4_C_M_awaddr                O    64 const
// ddr4_C_M_awlen                 O     8 const
// ddr4_C_M_awsize                O     3 const
// ddr4_C_M_awburst               O     2 const
// ddr4_C_M_awlock                O     1 const
// ddr4_C_M_awcache               O     4 const
// ddr4_C_M_awprot                O     3 const
// ddr4_C_M_awqos                 O     4 const
// ddr4_C_M_awregion              O     4 const
// ddr4_C_M_wvalid                O     1 const
// ddr4_C_M_wdata                 O   512 const
// ddr4_C_M_wstrb                 O    64 const
// ddr4_C_M_wlast                 O     1 const
// ddr4_C_M_bready                O     1 const
// ddr4_C_M_arvalid               O     1 const
// ddr4_C_M_arid                  O    16 const
// ddr4_C_M_araddr                O    64 const
// ddr4_C_M_arlen                 O     8 const
// ddr4_C_M_arsize                O     3 const
// ddr4_C_M_arburst               O     2 const
// ddr4_C_M_arlock                O     1 const
// ddr4_C_M_arcache               O     4 const
// ddr4_C_M_arprot                O     3 const
// ddr4_C_M_arqos                 O     4 const
// ddr4_C_M_arregion              O     4 const
// ddr4_C_M_rready                O     1 const
// ddr4_D_M_awvalid               O     1 const
// ddr4_D_M_awid                  O    16 const
// ddr4_D_M_awaddr                O    64 const
// ddr4_D_M_awlen                 O     8 const
// ddr4_D_M_awsize                O     3 const
// ddr4_D_M_awburst               O     2 const
// ddr4_D_M_awlock                O     1 const
// ddr4_D_M_awcache               O     4 const
// ddr4_D_M_awprot                O     3 const
// ddr4_D_M_awqos                 O     4 const
// ddr4_D_M_awregion              O     4 const
// ddr4_D_M_wvalid                O     1 const
// ddr4_D_M_wdata                 O   512 const
// ddr4_D_M_wstrb                 O    64 const
// ddr4_D_M_wlast                 O     1 const
// ddr4_D_M_bready                O     1 const
// ddr4_D_M_arvalid               O     1 const
// ddr4_D_M_arid                  O    16 const
// ddr4_D_M_araddr                O    64 const
// ddr4_D_M_arlen                 O     8 const
// ddr4_D_M_arsize                O     3 const
// ddr4_D_M_arburst               O     2 const
// ddr4_D_M_arlock                O     1 const
// ddr4_D_M_arcache               O     4 const
// ddr4_D_M_arprot                O     3 const
// ddr4_D_M_arqos                 O     4 const
// ddr4_D_M_arregion              O     4 const
// ddr4_D_M_rready                O     1 const
// m_vled                         O    16 reg
// m_shutdown_received            O     1 reg
// RDY_m_shutdown_received        O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// host_AXI4_S_awvalid            I     1
// host_AXI4_S_awid               I    16 reg
// host_AXI4_S_awaddr             I    64 reg
// host_AXI4_S_awlen              I     8 reg
// host_AXI4_S_awsize             I     3 reg
// host_AXI4_S_awburst            I     2 reg
// host_AXI4_S_awlock             I     1 reg
// host_AXI4_S_awcache            I     4 reg
// host_AXI4_S_awprot             I     3 reg
// host_AXI4_S_awqos              I     4 reg
// host_AXI4_S_awregion           I     4 reg
// host_AXI4_S_wvalid             I     1
// host_AXI4_S_wdata              I   512 reg
// host_AXI4_S_wstrb              I    64 reg
// host_AXI4_S_wlast              I     1 reg
// host_AXI4_S_bready             I     1
// host_AXI4_S_arvalid            I     1
// host_AXI4_S_arid               I    16 reg
// host_AXI4_S_araddr             I    64 reg
// host_AXI4_S_arlen              I     8 reg
// host_AXI4_S_arsize             I     3 reg
// host_AXI4_S_arburst            I     2 reg
// host_AXI4_S_arlock             I     1 reg
// host_AXI4_S_arcache            I     4 reg
// host_AXI4_S_arprot             I     3 reg
// host_AXI4_S_arqos              I     4 reg
// host_AXI4_S_arregion           I     4 reg
// host_AXI4_S_rready             I     1
// host_AXI4L_S_awvalid           I     1
// host_AXI4L_S_awaddr            I    32 reg
// host_AXI4L_S_awprot            I     3 reg
// host_AXI4L_S_wvalid            I     1
// host_AXI4L_S_wdata             I    32 reg
// host_AXI4L_S_wstrb             I     4 reg
// host_AXI4L_S_bready            I     1
// host_AXI4L_S_arvalid           I     1
// host_AXI4L_S_araddr            I    32 reg
// host_AXI4L_S_arprot            I     3 reg
// host_AXI4L_S_rready            I     1
// ddr4_A_M_awready               I     1
// ddr4_A_M_wready                I     1
// ddr4_A_M_bvalid                I     1
// ddr4_A_M_bid                   I    16 reg
// ddr4_A_M_bresp                 I     2 reg
// ddr4_A_M_arready               I     1
// ddr4_A_M_rvalid                I     1
// ddr4_A_M_rid                   I    16 reg
// ddr4_A_M_rdata                 I   512 reg
// ddr4_A_M_rresp                 I     2 reg
// ddr4_A_M_rlast                 I     1 reg
// ddr4_B_M_awready               I     1
// ddr4_B_M_wready                I     1
// ddr4_B_M_bvalid                I     1
// ddr4_B_M_bid                   I    16 reg
// ddr4_B_M_bresp                 I     2 reg
// ddr4_B_M_arready               I     1
// ddr4_B_M_rvalid                I     1
// ddr4_B_M_rid                   I    16 reg
// ddr4_B_M_rdata                 I   512 reg
// ddr4_B_M_rresp                 I     2 reg
// ddr4_B_M_rlast                 I     1 reg
// ddr4_C_M_awready               I     1 unused
// ddr4_C_M_wready                I     1 unused
// ddr4_C_M_bvalid                I     1 unused
// ddr4_C_M_bid                   I    16 unused
// ddr4_C_M_bresp                 I     2 unused
// ddr4_C_M_arready               I     1 unused
// ddr4_C_M_rvalid                I     1 unused
// ddr4_C_M_rid                   I    16 unused
// ddr4_C_M_rdata                 I   512 unused
// ddr4_C_M_rresp                 I     2 unused
// ddr4_C_M_rlast                 I     1 unused
// ddr4_D_M_awready               I     1 unused
// ddr4_D_M_wready                I     1 unused
// ddr4_D_M_bvalid                I     1 unused
// ddr4_D_M_bid                   I    16 unused
// ddr4_D_M_bresp                 I     2 unused
// ddr4_D_M_arready               I     1 unused
// ddr4_D_M_rvalid                I     1 unused
// ddr4_D_M_rid                   I    16 unused
// ddr4_D_M_rdata                 I   512 unused
// ddr4_D_M_rresp                 I     2 unused
// ddr4_D_M_rlast                 I     1 unused
// m_ddr4s_ready_ddr4s_ready      I     4 reg
// m_glcount0_glcount0            I    64 reg
// m_glcount1_glcount1            I    64 reg
// m_vdip_vdip                    I    16 reg
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkBluPont_HW_Side(CLK,
			 RST_N,

			 host_AXI4_S_awvalid,
			 host_AXI4_S_awid,
			 host_AXI4_S_awaddr,
			 host_AXI4_S_awlen,
			 host_AXI4_S_awsize,
			 host_AXI4_S_awburst,
			 host_AXI4_S_awlock,
			 host_AXI4_S_awcache,
			 host_AXI4_S_awprot,
			 host_AXI4_S_awqos,
			 host_AXI4_S_awregion,

			 host_AXI4_S_awready,

			 host_AXI4_S_wvalid,
			 host_AXI4_S_wdata,
			 host_AXI4_S_wstrb,
			 host_AXI4_S_wlast,

			 host_AXI4_S_wready,

			 host_AXI4_S_bvalid,

			 host_AXI4_S_bid,

			 host_AXI4_S_bresp,

			 host_AXI4_S_bready,

			 host_AXI4_S_arvalid,
			 host_AXI4_S_arid,
			 host_AXI4_S_araddr,
			 host_AXI4_S_arlen,
			 host_AXI4_S_arsize,
			 host_AXI4_S_arburst,
			 host_AXI4_S_arlock,
			 host_AXI4_S_arcache,
			 host_AXI4_S_arprot,
			 host_AXI4_S_arqos,
			 host_AXI4_S_arregion,

			 host_AXI4_S_arready,

			 host_AXI4_S_rvalid,

			 host_AXI4_S_rid,

			 host_AXI4_S_rdata,

			 host_AXI4_S_rresp,

			 host_AXI4_S_rlast,

			 host_AXI4_S_rready,

			 host_AXI4L_S_awvalid,
			 host_AXI4L_S_awaddr,
			 host_AXI4L_S_awprot,

			 host_AXI4L_S_awready,

			 host_AXI4L_S_wvalid,
			 host_AXI4L_S_wdata,
			 host_AXI4L_S_wstrb,

			 host_AXI4L_S_wready,

			 host_AXI4L_S_bvalid,

			 host_AXI4L_S_bresp,

			 host_AXI4L_S_bready,

			 host_AXI4L_S_arvalid,
			 host_AXI4L_S_araddr,
			 host_AXI4L_S_arprot,

			 host_AXI4L_S_arready,

			 host_AXI4L_S_rvalid,

			 host_AXI4L_S_rresp,

			 host_AXI4L_S_rdata,

			 host_AXI4L_S_rready,

			 ddr4_A_M_awvalid,

			 ddr4_A_M_awid,

			 ddr4_A_M_awaddr,

			 ddr4_A_M_awlen,

			 ddr4_A_M_awsize,

			 ddr4_A_M_awburst,

			 ddr4_A_M_awlock,

			 ddr4_A_M_awcache,

			 ddr4_A_M_awprot,

			 ddr4_A_M_awqos,

			 ddr4_A_M_awregion,

			 ddr4_A_M_awready,

			 ddr4_A_M_wvalid,

			 ddr4_A_M_wdata,

			 ddr4_A_M_wstrb,

			 ddr4_A_M_wlast,

			 ddr4_A_M_wready,

			 ddr4_A_M_bvalid,
			 ddr4_A_M_bid,
			 ddr4_A_M_bresp,

			 ddr4_A_M_bready,

			 ddr4_A_M_arvalid,

			 ddr4_A_M_arid,

			 ddr4_A_M_araddr,

			 ddr4_A_M_arlen,

			 ddr4_A_M_arsize,

			 ddr4_A_M_arburst,

			 ddr4_A_M_arlock,

			 ddr4_A_M_arcache,

			 ddr4_A_M_arprot,

			 ddr4_A_M_arqos,

			 ddr4_A_M_arregion,

			 ddr4_A_M_arready,

			 ddr4_A_M_rvalid,
			 ddr4_A_M_rid,
			 ddr4_A_M_rdata,
			 ddr4_A_M_rresp,
			 ddr4_A_M_rlast,

			 ddr4_A_M_rready,

			 ddr4_B_M_awvalid,

			 ddr4_B_M_awid,

			 ddr4_B_M_awaddr,

			 ddr4_B_M_awlen,

			 ddr4_B_M_awsize,

			 ddr4_B_M_awburst,

			 ddr4_B_M_awlock,

			 ddr4_B_M_awcache,

			 ddr4_B_M_awprot,

			 ddr4_B_M_awqos,

			 ddr4_B_M_awregion,

			 ddr4_B_M_awready,

			 ddr4_B_M_wvalid,

			 ddr4_B_M_wdata,

			 ddr4_B_M_wstrb,

			 ddr4_B_M_wlast,

			 ddr4_B_M_wready,

			 ddr4_B_M_bvalid,
			 ddr4_B_M_bid,
			 ddr4_B_M_bresp,

			 ddr4_B_M_bready,

			 ddr4_B_M_arvalid,

			 ddr4_B_M_arid,

			 ddr4_B_M_araddr,

			 ddr4_B_M_arlen,

			 ddr4_B_M_arsize,

			 ddr4_B_M_arburst,

			 ddr4_B_M_arlock,

			 ddr4_B_M_arcache,

			 ddr4_B_M_arprot,

			 ddr4_B_M_arqos,

			 ddr4_B_M_arregion,

			 ddr4_B_M_arready,

			 ddr4_B_M_rvalid,
			 ddr4_B_M_rid,
			 ddr4_B_M_rdata,
			 ddr4_B_M_rresp,
			 ddr4_B_M_rlast,

			 ddr4_B_M_rready,

			 ddr4_C_M_awvalid,

			 ddr4_C_M_awid,

			 ddr4_C_M_awaddr,

			 ddr4_C_M_awlen,

			 ddr4_C_M_awsize,

			 ddr4_C_M_awburst,

			 ddr4_C_M_awlock,

			 ddr4_C_M_awcache,

			 ddr4_C_M_awprot,

			 ddr4_C_M_awqos,

			 ddr4_C_M_awregion,

			 ddr4_C_M_awready,

			 ddr4_C_M_wvalid,

			 ddr4_C_M_wdata,

			 ddr4_C_M_wstrb,

			 ddr4_C_M_wlast,

			 ddr4_C_M_wready,

			 ddr4_C_M_bvalid,
			 ddr4_C_M_bid,
			 ddr4_C_M_bresp,

			 ddr4_C_M_bready,

			 ddr4_C_M_arvalid,

			 ddr4_C_M_arid,

			 ddr4_C_M_araddr,

			 ddr4_C_M_arlen,

			 ddr4_C_M_arsize,

			 ddr4_C_M_arburst,

			 ddr4_C_M_arlock,

			 ddr4_C_M_arcache,

			 ddr4_C_M_arprot,

			 ddr4_C_M_arqos,

			 ddr4_C_M_arregion,

			 ddr4_C_M_arready,

			 ddr4_C_M_rvalid,
			 ddr4_C_M_rid,
			 ddr4_C_M_rdata,
			 ddr4_C_M_rresp,
			 ddr4_C_M_rlast,

			 ddr4_C_M_rready,

			 ddr4_D_M_awvalid,

			 ddr4_D_M_awid,

			 ddr4_D_M_awaddr,

			 ddr4_D_M_awlen,

			 ddr4_D_M_awsize,

			 ddr4_D_M_awburst,

			 ddr4_D_M_awlock,

			 ddr4_D_M_awcache,

			 ddr4_D_M_awprot,

			 ddr4_D_M_awqos,

			 ddr4_D_M_awregion,

			 ddr4_D_M_awready,

			 ddr4_D_M_wvalid,

			 ddr4_D_M_wdata,

			 ddr4_D_M_wstrb,

			 ddr4_D_M_wlast,

			 ddr4_D_M_wready,

			 ddr4_D_M_bvalid,
			 ddr4_D_M_bid,
			 ddr4_D_M_bresp,

			 ddr4_D_M_bready,

			 ddr4_D_M_arvalid,

			 ddr4_D_M_arid,

			 ddr4_D_M_araddr,

			 ddr4_D_M_arlen,

			 ddr4_D_M_arsize,

			 ddr4_D_M_arburst,

			 ddr4_D_M_arlock,

			 ddr4_D_M_arcache,

			 ddr4_D_M_arprot,

			 ddr4_D_M_arqos,

			 ddr4_D_M_arregion,

			 ddr4_D_M_arready,

			 ddr4_D_M_rvalid,
			 ddr4_D_M_rid,
			 ddr4_D_M_rdata,
			 ddr4_D_M_rresp,
			 ddr4_D_M_rlast,

			 ddr4_D_M_rready,

			 m_ddr4s_ready_ddr4s_ready,

			 m_glcount0_glcount0,

			 m_glcount1_glcount1,

			 m_vled,

			 m_vdip_vdip,

			 m_shutdown_received,
			 RDY_m_shutdown_received);
  input  CLK;
  input  RST_N;

  // action method host_AXI4_S_m_awvalid
  input  host_AXI4_S_awvalid;
  input  [15 : 0] host_AXI4_S_awid;
  input  [63 : 0] host_AXI4_S_awaddr;
  input  [7 : 0] host_AXI4_S_awlen;
  input  [2 : 0] host_AXI4_S_awsize;
  input  [1 : 0] host_AXI4_S_awburst;
  input  host_AXI4_S_awlock;
  input  [3 : 0] host_AXI4_S_awcache;
  input  [2 : 0] host_AXI4_S_awprot;
  input  [3 : 0] host_AXI4_S_awqos;
  input  [3 : 0] host_AXI4_S_awregion;

  // value method host_AXI4_S_m_awready
  output host_AXI4_S_awready;

  // action method host_AXI4_S_m_wvalid
  input  host_AXI4_S_wvalid;
  input  [511 : 0] host_AXI4_S_wdata;
  input  [63 : 0] host_AXI4_S_wstrb;
  input  host_AXI4_S_wlast;

  // value method host_AXI4_S_m_wready
  output host_AXI4_S_wready;

  // value method host_AXI4_S_m_bvalid
  output host_AXI4_S_bvalid;

  // value method host_AXI4_S_m_bid
  output [15 : 0] host_AXI4_S_bid;

  // value method host_AXI4_S_m_bresp
  output [1 : 0] host_AXI4_S_bresp;

  // value method host_AXI4_S_m_buser

  // action method host_AXI4_S_m_bready
  input  host_AXI4_S_bready;

  // action method host_AXI4_S_m_arvalid
  input  host_AXI4_S_arvalid;
  input  [15 : 0] host_AXI4_S_arid;
  input  [63 : 0] host_AXI4_S_araddr;
  input  [7 : 0] host_AXI4_S_arlen;
  input  [2 : 0] host_AXI4_S_arsize;
  input  [1 : 0] host_AXI4_S_arburst;
  input  host_AXI4_S_arlock;
  input  [3 : 0] host_AXI4_S_arcache;
  input  [2 : 0] host_AXI4_S_arprot;
  input  [3 : 0] host_AXI4_S_arqos;
  input  [3 : 0] host_AXI4_S_arregion;

  // value method host_AXI4_S_m_arready
  output host_AXI4_S_arready;

  // value method host_AXI4_S_m_rvalid
  output host_AXI4_S_rvalid;

  // value method host_AXI4_S_m_rid
  output [15 : 0] host_AXI4_S_rid;

  // value method host_AXI4_S_m_rdata
  output [511 : 0] host_AXI4_S_rdata;

  // value method host_AXI4_S_m_rresp
  output [1 : 0] host_AXI4_S_rresp;

  // value method host_AXI4_S_m_rlast
  output host_AXI4_S_rlast;

  // value method host_AXI4_S_m_ruser

  // action method host_AXI4_S_m_rready
  input  host_AXI4_S_rready;

  // action method host_AXI4L_S_m_awvalid
  input  host_AXI4L_S_awvalid;
  input  [31 : 0] host_AXI4L_S_awaddr;
  input  [2 : 0] host_AXI4L_S_awprot;

  // value method host_AXI4L_S_m_awready
  output host_AXI4L_S_awready;

  // action method host_AXI4L_S_m_wvalid
  input  host_AXI4L_S_wvalid;
  input  [31 : 0] host_AXI4L_S_wdata;
  input  [3 : 0] host_AXI4L_S_wstrb;

  // value method host_AXI4L_S_m_wready
  output host_AXI4L_S_wready;

  // value method host_AXI4L_S_m_bvalid
  output host_AXI4L_S_bvalid;

  // value method host_AXI4L_S_m_bresp
  output [1 : 0] host_AXI4L_S_bresp;

  // value method host_AXI4L_S_m_buser

  // action method host_AXI4L_S_m_bready
  input  host_AXI4L_S_bready;

  // action method host_AXI4L_S_m_arvalid
  input  host_AXI4L_S_arvalid;
  input  [31 : 0] host_AXI4L_S_araddr;
  input  [2 : 0] host_AXI4L_S_arprot;

  // value method host_AXI4L_S_m_arready
  output host_AXI4L_S_arready;

  // value method host_AXI4L_S_m_rvalid
  output host_AXI4L_S_rvalid;

  // value method host_AXI4L_S_m_rresp
  output [1 : 0] host_AXI4L_S_rresp;

  // value method host_AXI4L_S_m_rdata
  output [31 : 0] host_AXI4L_S_rdata;

  // value method host_AXI4L_S_m_ruser

  // action method host_AXI4L_S_m_rready
  input  host_AXI4L_S_rready;

  // value method ddr4_A_M_m_awvalid
  output ddr4_A_M_awvalid;

  // value method ddr4_A_M_m_awid
  output [15 : 0] ddr4_A_M_awid;

  // value method ddr4_A_M_m_awaddr
  output [63 : 0] ddr4_A_M_awaddr;

  // value method ddr4_A_M_m_awlen
  output [7 : 0] ddr4_A_M_awlen;

  // value method ddr4_A_M_m_awsize
  output [2 : 0] ddr4_A_M_awsize;

  // value method ddr4_A_M_m_awburst
  output [1 : 0] ddr4_A_M_awburst;

  // value method ddr4_A_M_m_awlock
  output ddr4_A_M_awlock;

  // value method ddr4_A_M_m_awcache
  output [3 : 0] ddr4_A_M_awcache;

  // value method ddr4_A_M_m_awprot
  output [2 : 0] ddr4_A_M_awprot;

  // value method ddr4_A_M_m_awqos
  output [3 : 0] ddr4_A_M_awqos;

  // value method ddr4_A_M_m_awregion
  output [3 : 0] ddr4_A_M_awregion;

  // value method ddr4_A_M_m_awuser

  // action method ddr4_A_M_m_awready
  input  ddr4_A_M_awready;

  // value method ddr4_A_M_m_wvalid
  output ddr4_A_M_wvalid;

  // value method ddr4_A_M_m_wdata
  output [511 : 0] ddr4_A_M_wdata;

  // value method ddr4_A_M_m_wstrb
  output [63 : 0] ddr4_A_M_wstrb;

  // value method ddr4_A_M_m_wlast
  output ddr4_A_M_wlast;

  // value method ddr4_A_M_m_wuser

  // action method ddr4_A_M_m_wready
  input  ddr4_A_M_wready;

  // action method ddr4_A_M_m_bvalid
  input  ddr4_A_M_bvalid;
  input  [15 : 0] ddr4_A_M_bid;
  input  [1 : 0] ddr4_A_M_bresp;

  // value method ddr4_A_M_m_bready
  output ddr4_A_M_bready;

  // value method ddr4_A_M_m_arvalid
  output ddr4_A_M_arvalid;

  // value method ddr4_A_M_m_arid
  output [15 : 0] ddr4_A_M_arid;

  // value method ddr4_A_M_m_araddr
  output [63 : 0] ddr4_A_M_araddr;

  // value method ddr4_A_M_m_arlen
  output [7 : 0] ddr4_A_M_arlen;

  // value method ddr4_A_M_m_arsize
  output [2 : 0] ddr4_A_M_arsize;

  // value method ddr4_A_M_m_arburst
  output [1 : 0] ddr4_A_M_arburst;

  // value method ddr4_A_M_m_arlock
  output ddr4_A_M_arlock;

  // value method ddr4_A_M_m_arcache
  output [3 : 0] ddr4_A_M_arcache;

  // value method ddr4_A_M_m_arprot
  output [2 : 0] ddr4_A_M_arprot;

  // value method ddr4_A_M_m_arqos
  output [3 : 0] ddr4_A_M_arqos;

  // value method ddr4_A_M_m_arregion
  output [3 : 0] ddr4_A_M_arregion;

  // value method ddr4_A_M_m_aruser

  // action method ddr4_A_M_m_arready
  input  ddr4_A_M_arready;

  // action method ddr4_A_M_m_rvalid
  input  ddr4_A_M_rvalid;
  input  [15 : 0] ddr4_A_M_rid;
  input  [511 : 0] ddr4_A_M_rdata;
  input  [1 : 0] ddr4_A_M_rresp;
  input  ddr4_A_M_rlast;

  // value method ddr4_A_M_m_rready
  output ddr4_A_M_rready;

  // value method ddr4_B_M_m_awvalid
  output ddr4_B_M_awvalid;

  // value method ddr4_B_M_m_awid
  output [15 : 0] ddr4_B_M_awid;

  // value method ddr4_B_M_m_awaddr
  output [63 : 0] ddr4_B_M_awaddr;

  // value method ddr4_B_M_m_awlen
  output [7 : 0] ddr4_B_M_awlen;

  // value method ddr4_B_M_m_awsize
  output [2 : 0] ddr4_B_M_awsize;

  // value method ddr4_B_M_m_awburst
  output [1 : 0] ddr4_B_M_awburst;

  // value method ddr4_B_M_m_awlock
  output ddr4_B_M_awlock;

  // value method ddr4_B_M_m_awcache
  output [3 : 0] ddr4_B_M_awcache;

  // value method ddr4_B_M_m_awprot
  output [2 : 0] ddr4_B_M_awprot;

  // value method ddr4_B_M_m_awqos
  output [3 : 0] ddr4_B_M_awqos;

  // value method ddr4_B_M_m_awregion
  output [3 : 0] ddr4_B_M_awregion;

  // value method ddr4_B_M_m_awuser

  // action method ddr4_B_M_m_awready
  input  ddr4_B_M_awready;

  // value method ddr4_B_M_m_wvalid
  output ddr4_B_M_wvalid;

  // value method ddr4_B_M_m_wdata
  output [511 : 0] ddr4_B_M_wdata;

  // value method ddr4_B_M_m_wstrb
  output [63 : 0] ddr4_B_M_wstrb;

  // value method ddr4_B_M_m_wlast
  output ddr4_B_M_wlast;

  // value method ddr4_B_M_m_wuser

  // action method ddr4_B_M_m_wready
  input  ddr4_B_M_wready;

  // action method ddr4_B_M_m_bvalid
  input  ddr4_B_M_bvalid;
  input  [15 : 0] ddr4_B_M_bid;
  input  [1 : 0] ddr4_B_M_bresp;

  // value method ddr4_B_M_m_bready
  output ddr4_B_M_bready;

  // value method ddr4_B_M_m_arvalid
  output ddr4_B_M_arvalid;

  // value method ddr4_B_M_m_arid
  output [15 : 0] ddr4_B_M_arid;

  // value method ddr4_B_M_m_araddr
  output [63 : 0] ddr4_B_M_araddr;

  // value method ddr4_B_M_m_arlen
  output [7 : 0] ddr4_B_M_arlen;

  // value method ddr4_B_M_m_arsize
  output [2 : 0] ddr4_B_M_arsize;

  // value method ddr4_B_M_m_arburst
  output [1 : 0] ddr4_B_M_arburst;

  // value method ddr4_B_M_m_arlock
  output ddr4_B_M_arlock;

  // value method ddr4_B_M_m_arcache
  output [3 : 0] ddr4_B_M_arcache;

  // value method ddr4_B_M_m_arprot
  output [2 : 0] ddr4_B_M_arprot;

  // value method ddr4_B_M_m_arqos
  output [3 : 0] ddr4_B_M_arqos;

  // value method ddr4_B_M_m_arregion
  output [3 : 0] ddr4_B_M_arregion;

  // value method ddr4_B_M_m_aruser

  // action method ddr4_B_M_m_arready
  input  ddr4_B_M_arready;

  // action method ddr4_B_M_m_rvalid
  input  ddr4_B_M_rvalid;
  input  [15 : 0] ddr4_B_M_rid;
  input  [511 : 0] ddr4_B_M_rdata;
  input  [1 : 0] ddr4_B_M_rresp;
  input  ddr4_B_M_rlast;

  // value method ddr4_B_M_m_rready
  output ddr4_B_M_rready;

  // value method ddr4_C_M_m_awvalid
  output ddr4_C_M_awvalid;

  // value method ddr4_C_M_m_awid
  output [15 : 0] ddr4_C_M_awid;

  // value method ddr4_C_M_m_awaddr
  output [63 : 0] ddr4_C_M_awaddr;

  // value method ddr4_C_M_m_awlen
  output [7 : 0] ddr4_C_M_awlen;

  // value method ddr4_C_M_m_awsize
  output [2 : 0] ddr4_C_M_awsize;

  // value method ddr4_C_M_m_awburst
  output [1 : 0] ddr4_C_M_awburst;

  // value method ddr4_C_M_m_awlock
  output ddr4_C_M_awlock;

  // value method ddr4_C_M_m_awcache
  output [3 : 0] ddr4_C_M_awcache;

  // value method ddr4_C_M_m_awprot
  output [2 : 0] ddr4_C_M_awprot;

  // value method ddr4_C_M_m_awqos
  output [3 : 0] ddr4_C_M_awqos;

  // value method ddr4_C_M_m_awregion
  output [3 : 0] ddr4_C_M_awregion;

  // value method ddr4_C_M_m_awuser

  // action method ddr4_C_M_m_awready
  input  ddr4_C_M_awready;

  // value method ddr4_C_M_m_wvalid
  output ddr4_C_M_wvalid;

  // value method ddr4_C_M_m_wdata
  output [511 : 0] ddr4_C_M_wdata;

  // value method ddr4_C_M_m_wstrb
  output [63 : 0] ddr4_C_M_wstrb;

  // value method ddr4_C_M_m_wlast
  output ddr4_C_M_wlast;

  // value method ddr4_C_M_m_wuser

  // action method ddr4_C_M_m_wready
  input  ddr4_C_M_wready;

  // action method ddr4_C_M_m_bvalid
  input  ddr4_C_M_bvalid;
  input  [15 : 0] ddr4_C_M_bid;
  input  [1 : 0] ddr4_C_M_bresp;

  // value method ddr4_C_M_m_bready
  output ddr4_C_M_bready;

  // value method ddr4_C_M_m_arvalid
  output ddr4_C_M_arvalid;

  // value method ddr4_C_M_m_arid
  output [15 : 0] ddr4_C_M_arid;

  // value method ddr4_C_M_m_araddr
  output [63 : 0] ddr4_C_M_araddr;

  // value method ddr4_C_M_m_arlen
  output [7 : 0] ddr4_C_M_arlen;

  // value method ddr4_C_M_m_arsize
  output [2 : 0] ddr4_C_M_arsize;

  // value method ddr4_C_M_m_arburst
  output [1 : 0] ddr4_C_M_arburst;

  // value method ddr4_C_M_m_arlock
  output ddr4_C_M_arlock;

  // value method ddr4_C_M_m_arcache
  output [3 : 0] ddr4_C_M_arcache;

  // value method ddr4_C_M_m_arprot
  output [2 : 0] ddr4_C_M_arprot;

  // value method ddr4_C_M_m_arqos
  output [3 : 0] ddr4_C_M_arqos;

  // value method ddr4_C_M_m_arregion
  output [3 : 0] ddr4_C_M_arregion;

  // value method ddr4_C_M_m_aruser

  // action method ddr4_C_M_m_arready
  input  ddr4_C_M_arready;

  // action method ddr4_C_M_m_rvalid
  input  ddr4_C_M_rvalid;
  input  [15 : 0] ddr4_C_M_rid;
  input  [511 : 0] ddr4_C_M_rdata;
  input  [1 : 0] ddr4_C_M_rresp;
  input  ddr4_C_M_rlast;

  // value method ddr4_C_M_m_rready
  output ddr4_C_M_rready;

  // value method ddr4_D_M_m_awvalid
  output ddr4_D_M_awvalid;

  // value method ddr4_D_M_m_awid
  output [15 : 0] ddr4_D_M_awid;

  // value method ddr4_D_M_m_awaddr
  output [63 : 0] ddr4_D_M_awaddr;

  // value method ddr4_D_M_m_awlen
  output [7 : 0] ddr4_D_M_awlen;

  // value method ddr4_D_M_m_awsize
  output [2 : 0] ddr4_D_M_awsize;

  // value method ddr4_D_M_m_awburst
  output [1 : 0] ddr4_D_M_awburst;

  // value method ddr4_D_M_m_awlock
  output ddr4_D_M_awlock;

  // value method ddr4_D_M_m_awcache
  output [3 : 0] ddr4_D_M_awcache;

  // value method ddr4_D_M_m_awprot
  output [2 : 0] ddr4_D_M_awprot;

  // value method ddr4_D_M_m_awqos
  output [3 : 0] ddr4_D_M_awqos;

  // value method ddr4_D_M_m_awregion
  output [3 : 0] ddr4_D_M_awregion;

  // value method ddr4_D_M_m_awuser

  // action method ddr4_D_M_m_awready
  input  ddr4_D_M_awready;

  // value method ddr4_D_M_m_wvalid
  output ddr4_D_M_wvalid;

  // value method ddr4_D_M_m_wdata
  output [511 : 0] ddr4_D_M_wdata;

  // value method ddr4_D_M_m_wstrb
  output [63 : 0] ddr4_D_M_wstrb;

  // value method ddr4_D_M_m_wlast
  output ddr4_D_M_wlast;

  // value method ddr4_D_M_m_wuser

  // action method ddr4_D_M_m_wready
  input  ddr4_D_M_wready;

  // action method ddr4_D_M_m_bvalid
  input  ddr4_D_M_bvalid;
  input  [15 : 0] ddr4_D_M_bid;
  input  [1 : 0] ddr4_D_M_bresp;

  // value method ddr4_D_M_m_bready
  output ddr4_D_M_bready;

  // value method ddr4_D_M_m_arvalid
  output ddr4_D_M_arvalid;

  // value method ddr4_D_M_m_arid
  output [15 : 0] ddr4_D_M_arid;

  // value method ddr4_D_M_m_araddr
  output [63 : 0] ddr4_D_M_araddr;

  // value method ddr4_D_M_m_arlen
  output [7 : 0] ddr4_D_M_arlen;

  // value method ddr4_D_M_m_arsize
  output [2 : 0] ddr4_D_M_arsize;

  // value method ddr4_D_M_m_arburst
  output [1 : 0] ddr4_D_M_arburst;

  // value method ddr4_D_M_m_arlock
  output ddr4_D_M_arlock;

  // value method ddr4_D_M_m_arcache
  output [3 : 0] ddr4_D_M_arcache;

  // value method ddr4_D_M_m_arprot
  output [2 : 0] ddr4_D_M_arprot;

  // value method ddr4_D_M_m_arqos
  output [3 : 0] ddr4_D_M_arqos;

  // value method ddr4_D_M_m_arregion
  output [3 : 0] ddr4_D_M_arregion;

  // value method ddr4_D_M_m_aruser

  // action method ddr4_D_M_m_arready
  input  ddr4_D_M_arready;

  // action method ddr4_D_M_m_rvalid
  input  ddr4_D_M_rvalid;
  input  [15 : 0] ddr4_D_M_rid;
  input  [511 : 0] ddr4_D_M_rdata;
  input  [1 : 0] ddr4_D_M_rresp;
  input  ddr4_D_M_rlast;

  // value method ddr4_D_M_m_rready
  output ddr4_D_M_rready;

  // action method m_ddr4s_ready
  input  [3 : 0] m_ddr4s_ready_ddr4s_ready;

  // action method m_glcount0
  input  [63 : 0] m_glcount0_glcount0;

  // action method m_glcount1
  input  [63 : 0] m_glcount1_glcount1;

  // value method m_vled
  output [15 : 0] m_vled;

  // action method m_vdip
  input  [15 : 0] m_vdip_vdip;

  // value method m_shutdown_received
  output m_shutdown_received;
  output RDY_m_shutdown_received;

  // signals for module outputs
  wire [511 : 0] ddr4_A_M_wdata,
		 ddr4_B_M_wdata,
		 ddr4_C_M_wdata,
		 ddr4_D_M_wdata,
		 host_AXI4_S_rdata;
  wire [63 : 0] ddr4_A_M_araddr,
		ddr4_A_M_awaddr,
		ddr4_A_M_wstrb,
		ddr4_B_M_araddr,
		ddr4_B_M_awaddr,
		ddr4_B_M_wstrb,
		ddr4_C_M_araddr,
		ddr4_C_M_awaddr,
		ddr4_C_M_wstrb,
		ddr4_D_M_araddr,
		ddr4_D_M_awaddr,
		ddr4_D_M_wstrb;
  wire [31 : 0] host_AXI4L_S_rdata;
  wire [15 : 0] ddr4_A_M_arid,
		ddr4_A_M_awid,
		ddr4_B_M_arid,
		ddr4_B_M_awid,
		ddr4_C_M_arid,
		ddr4_C_M_awid,
		ddr4_D_M_arid,
		ddr4_D_M_awid,
		host_AXI4_S_bid,
		host_AXI4_S_rid,
		m_vled;
  wire [7 : 0] ddr4_A_M_arlen,
	       ddr4_A_M_awlen,
	       ddr4_B_M_arlen,
	       ddr4_B_M_awlen,
	       ddr4_C_M_arlen,
	       ddr4_C_M_awlen,
	       ddr4_D_M_arlen,
	       ddr4_D_M_awlen;
  wire [3 : 0] ddr4_A_M_arcache,
	       ddr4_A_M_arqos,
	       ddr4_A_M_arregion,
	       ddr4_A_M_awcache,
	       ddr4_A_M_awqos,
	       ddr4_A_M_awregion,
	       ddr4_B_M_arcache,
	       ddr4_B_M_arqos,
	       ddr4_B_M_arregion,
	       ddr4_B_M_awcache,
	       ddr4_B_M_awqos,
	       ddr4_B_M_awregion,
	       ddr4_C_M_arcache,
	       ddr4_C_M_arqos,
	       ddr4_C_M_arregion,
	       ddr4_C_M_awcache,
	       ddr4_C_M_awqos,
	       ddr4_C_M_awregion,
	       ddr4_D_M_arcache,
	       ddr4_D_M_arqos,
	       ddr4_D_M_arregion,
	       ddr4_D_M_awcache,
	       ddr4_D_M_awqos,
	       ddr4_D_M_awregion;
  wire [2 : 0] ddr4_A_M_arprot,
	       ddr4_A_M_arsize,
	       ddr4_A_M_awprot,
	       ddr4_A_M_awsize,
	       ddr4_B_M_arprot,
	       ddr4_B_M_arsize,
	       ddr4_B_M_awprot,
	       ddr4_B_M_awsize,
	       ddr4_C_M_arprot,
	       ddr4_C_M_arsize,
	       ddr4_C_M_awprot,
	       ddr4_C_M_awsize,
	       ddr4_D_M_arprot,
	       ddr4_D_M_arsize,
	       ddr4_D_M_awprot,
	       ddr4_D_M_awsize;
  wire [1 : 0] ddr4_A_M_arburst,
	       ddr4_A_M_awburst,
	       ddr4_B_M_arburst,
	       ddr4_B_M_awburst,
	       ddr4_C_M_arburst,
	       ddr4_C_M_awburst,
	       ddr4_D_M_arburst,
	       ddr4_D_M_awburst,
	       host_AXI4L_S_bresp,
	       host_AXI4L_S_rresp,
	       host_AXI4_S_bresp,
	       host_AXI4_S_rresp;
  wire RDY_m_shutdown_received,
       ddr4_A_M_arlock,
       ddr4_A_M_arvalid,
       ddr4_A_M_awlock,
       ddr4_A_M_awvalid,
       ddr4_A_M_bready,
       ddr4_A_M_rready,
       ddr4_A_M_wlast,
       ddr4_A_M_wvalid,
       ddr4_B_M_arlock,
       ddr4_B_M_arvalid,
       ddr4_B_M_awlock,
       ddr4_B_M_awvalid,
       ddr4_B_M_bready,
       ddr4_B_M_rready,
       ddr4_B_M_wlast,
       ddr4_B_M_wvalid,
       ddr4_C_M_arlock,
       ddr4_C_M_arvalid,
       ddr4_C_M_awlock,
       ddr4_C_M_awvalid,
       ddr4_C_M_bready,
       ddr4_C_M_rready,
       ddr4_C_M_wlast,
       ddr4_C_M_wvalid,
       ddr4_D_M_arlock,
       ddr4_D_M_arvalid,
       ddr4_D_M_awlock,
       ddr4_D_M_awvalid,
       ddr4_D_M_bready,
       ddr4_D_M_rready,
       ddr4_D_M_wlast,
       ddr4_D_M_wvalid,
       host_AXI4L_S_arready,
       host_AXI4L_S_awready,
       host_AXI4L_S_bvalid,
       host_AXI4L_S_rvalid,
       host_AXI4L_S_wready,
       host_AXI4_S_arready,
       host_AXI4_S_awready,
       host_AXI4_S_bvalid,
       host_AXI4_S_rlast,
       host_AXI4_S_rvalid,
       host_AXI4_S_wready,
       m_shutdown_received;

  // register rg_ddr4s_ready
  reg [3 : 0] rg_ddr4s_ready;
  wire [3 : 0] rg_ddr4s_ready$D_IN;
  wire rg_ddr4s_ready$EN;

  // register rg_glcount0
  reg [63 : 0] rg_glcount0;
  wire [63 : 0] rg_glcount0$D_IN;
  wire rg_glcount0$EN;

  // register rg_glcount1
  reg [63 : 0] rg_glcount1;
  wire [63 : 0] rg_glcount1$D_IN;
  wire rg_glcount1$EN;

  // register rg_shutdown_received
  reg rg_shutdown_received;
  wire rg_shutdown_received$D_IN, rg_shutdown_received$EN;

  // register rg_vdip
  reg [15 : 0] rg_vdip;
  wire [15 : 0] rg_vdip$D_IN;
  wire rg_vdip$EN;

  // register rg_vled
  reg [15 : 0] rg_vled;
  wire [15 : 0] rg_vled$D_IN;
  wire rg_vled$EN;

  // ports of submodule adapter_AXI4L_S_to_AXI4_M
  wire [511 : 0] adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_rdata,
		 adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_wdata;
  wire [63 : 0] adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_araddr,
		adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_awaddr,
		adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_wstrb;
  wire [31 : 0] adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_araddr,
		adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_awaddr,
		adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_rdata,
		adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_wdata;
  wire [15 : 0] adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_arid,
		adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_awid,
		adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_bid,
		adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_rid;
  wire [7 : 0] adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_arlen,
	       adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_awlen;
  wire [3 : 0] adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_wstrb,
	       adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_arcache,
	       adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_arqos,
	       adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_arregion,
	       adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_awcache,
	       adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_awqos,
	       adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_awregion;
  wire [2 : 0] adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_arprot,
	       adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_awprot,
	       adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_arprot,
	       adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_arsize,
	       adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_awprot,
	       adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_awsize;
  wire [1 : 0] adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_bresp,
	       adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_rresp,
	       adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_arburst,
	       adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_awburst,
	       adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_bresp,
	       adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_rresp;
  wire adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_arready,
       adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_arvalid,
       adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_awready,
       adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_awvalid,
       adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_bready,
       adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_bvalid,
       adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_rready,
       adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_rvalid,
       adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_wready,
       adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_wvalid,
       adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_arlock,
       adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_arready,
       adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_arvalid,
       adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_awlock,
       adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_awready,
       adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_awvalid,
       adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_bready,
       adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_bvalid,
       adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_rlast,
       adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_rready,
       adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_rvalid,
       adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_wlast,
       adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_wready,
       adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_wvalid;

  // ports of submodule fabric
  wire [511 : 0] fabric$v_from_masters_0_rdata,
		 fabric$v_from_masters_0_wdata,
		 fabric$v_from_masters_1_rdata,
		 fabric$v_from_masters_1_wdata,
		 fabric$v_to_slaves_0_rdata,
		 fabric$v_to_slaves_0_wdata,
		 fabric$v_to_slaves_1_rdata,
		 fabric$v_to_slaves_1_wdata;
  wire [63 : 0] fabric$v_from_masters_0_araddr,
		fabric$v_from_masters_0_awaddr,
		fabric$v_from_masters_0_wstrb,
		fabric$v_from_masters_1_araddr,
		fabric$v_from_masters_1_awaddr,
		fabric$v_from_masters_1_wstrb,
		fabric$v_to_slaves_0_araddr,
		fabric$v_to_slaves_0_awaddr,
		fabric$v_to_slaves_0_wstrb,
		fabric$v_to_slaves_1_araddr,
		fabric$v_to_slaves_1_awaddr,
		fabric$v_to_slaves_1_wstrb;
  wire [15 : 0] fabric$v_from_masters_0_arid,
		fabric$v_from_masters_0_awid,
		fabric$v_from_masters_0_bid,
		fabric$v_from_masters_0_rid,
		fabric$v_from_masters_1_arid,
		fabric$v_from_masters_1_awid,
		fabric$v_from_masters_1_bid,
		fabric$v_from_masters_1_rid,
		fabric$v_to_slaves_0_arid,
		fabric$v_to_slaves_0_awid,
		fabric$v_to_slaves_0_bid,
		fabric$v_to_slaves_0_rid,
		fabric$v_to_slaves_1_arid,
		fabric$v_to_slaves_1_awid,
		fabric$v_to_slaves_1_bid,
		fabric$v_to_slaves_1_rid;
  wire [7 : 0] fabric$v_from_masters_0_arlen,
	       fabric$v_from_masters_0_awlen,
	       fabric$v_from_masters_1_arlen,
	       fabric$v_from_masters_1_awlen,
	       fabric$v_to_slaves_0_arlen,
	       fabric$v_to_slaves_0_awlen,
	       fabric$v_to_slaves_1_arlen,
	       fabric$v_to_slaves_1_awlen;
  wire [3 : 0] fabric$set_verbosity_verbosity,
	       fabric$v_from_masters_0_arcache,
	       fabric$v_from_masters_0_arqos,
	       fabric$v_from_masters_0_arregion,
	       fabric$v_from_masters_0_awcache,
	       fabric$v_from_masters_0_awqos,
	       fabric$v_from_masters_0_awregion,
	       fabric$v_from_masters_1_arcache,
	       fabric$v_from_masters_1_arqos,
	       fabric$v_from_masters_1_arregion,
	       fabric$v_from_masters_1_awcache,
	       fabric$v_from_masters_1_awqos,
	       fabric$v_from_masters_1_awregion,
	       fabric$v_to_slaves_0_arcache,
	       fabric$v_to_slaves_0_arqos,
	       fabric$v_to_slaves_0_arregion,
	       fabric$v_to_slaves_0_awcache,
	       fabric$v_to_slaves_0_awqos,
	       fabric$v_to_slaves_0_awregion,
	       fabric$v_to_slaves_1_arcache,
	       fabric$v_to_slaves_1_arqos,
	       fabric$v_to_slaves_1_arregion,
	       fabric$v_to_slaves_1_awcache,
	       fabric$v_to_slaves_1_awqos,
	       fabric$v_to_slaves_1_awregion;
  wire [2 : 0] fabric$v_from_masters_0_arprot,
	       fabric$v_from_masters_0_arsize,
	       fabric$v_from_masters_0_awprot,
	       fabric$v_from_masters_0_awsize,
	       fabric$v_from_masters_1_arprot,
	       fabric$v_from_masters_1_arsize,
	       fabric$v_from_masters_1_awprot,
	       fabric$v_from_masters_1_awsize,
	       fabric$v_to_slaves_0_arprot,
	       fabric$v_to_slaves_0_arsize,
	       fabric$v_to_slaves_0_awprot,
	       fabric$v_to_slaves_0_awsize,
	       fabric$v_to_slaves_1_arprot,
	       fabric$v_to_slaves_1_arsize,
	       fabric$v_to_slaves_1_awprot,
	       fabric$v_to_slaves_1_awsize;
  wire [1 : 0] fabric$v_from_masters_0_arburst,
	       fabric$v_from_masters_0_awburst,
	       fabric$v_from_masters_0_bresp,
	       fabric$v_from_masters_0_rresp,
	       fabric$v_from_masters_1_arburst,
	       fabric$v_from_masters_1_awburst,
	       fabric$v_from_masters_1_bresp,
	       fabric$v_from_masters_1_rresp,
	       fabric$v_to_slaves_0_arburst,
	       fabric$v_to_slaves_0_awburst,
	       fabric$v_to_slaves_0_bresp,
	       fabric$v_to_slaves_0_rresp,
	       fabric$v_to_slaves_1_arburst,
	       fabric$v_to_slaves_1_awburst,
	       fabric$v_to_slaves_1_bresp,
	       fabric$v_to_slaves_1_rresp;
  wire fabric$EN_reset,
       fabric$EN_set_verbosity,
       fabric$v_from_masters_0_arlock,
       fabric$v_from_masters_0_arready,
       fabric$v_from_masters_0_arvalid,
       fabric$v_from_masters_0_awlock,
       fabric$v_from_masters_0_awready,
       fabric$v_from_masters_0_awvalid,
       fabric$v_from_masters_0_bready,
       fabric$v_from_masters_0_bvalid,
       fabric$v_from_masters_0_rlast,
       fabric$v_from_masters_0_rready,
       fabric$v_from_masters_0_rvalid,
       fabric$v_from_masters_0_wlast,
       fabric$v_from_masters_0_wready,
       fabric$v_from_masters_0_wvalid,
       fabric$v_from_masters_1_arlock,
       fabric$v_from_masters_1_arready,
       fabric$v_from_masters_1_arvalid,
       fabric$v_from_masters_1_awlock,
       fabric$v_from_masters_1_awready,
       fabric$v_from_masters_1_awvalid,
       fabric$v_from_masters_1_bready,
       fabric$v_from_masters_1_bvalid,
       fabric$v_from_masters_1_rlast,
       fabric$v_from_masters_1_rready,
       fabric$v_from_masters_1_rvalid,
       fabric$v_from_masters_1_wlast,
       fabric$v_from_masters_1_wready,
       fabric$v_from_masters_1_wvalid,
       fabric$v_to_slaves_0_arlock,
       fabric$v_to_slaves_0_arready,
       fabric$v_to_slaves_0_arvalid,
       fabric$v_to_slaves_0_awlock,
       fabric$v_to_slaves_0_awready,
       fabric$v_to_slaves_0_awvalid,
       fabric$v_to_slaves_0_bready,
       fabric$v_to_slaves_0_bvalid,
       fabric$v_to_slaves_0_rlast,
       fabric$v_to_slaves_0_rready,
       fabric$v_to_slaves_0_rvalid,
       fabric$v_to_slaves_0_wlast,
       fabric$v_to_slaves_0_wready,
       fabric$v_to_slaves_0_wvalid,
       fabric$v_to_slaves_1_arlock,
       fabric$v_to_slaves_1_arready,
       fabric$v_to_slaves_1_arvalid,
       fabric$v_to_slaves_1_awlock,
       fabric$v_to_slaves_1_awready,
       fabric$v_to_slaves_1_awvalid,
       fabric$v_to_slaves_1_bready,
       fabric$v_to_slaves_1_bvalid,
       fabric$v_to_slaves_1_rlast,
       fabric$v_to_slaves_1_rready,
       fabric$v_to_slaves_1_rvalid,
       fabric$v_to_slaves_1_wlast,
       fabric$v_to_slaves_1_wready,
       fabric$v_to_slaves_1_wvalid;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_rd_addr_channel,
       CAN_FIRE_RL_rl_rd_data_channel,
       CAN_FIRE_RL_rl_wr_addr_channel,
       CAN_FIRE_RL_rl_wr_data_channel,
       CAN_FIRE_RL_rl_wr_response_channel,
       CAN_FIRE_ddr4_A_M_m_arready,
       CAN_FIRE_ddr4_A_M_m_awready,
       CAN_FIRE_ddr4_A_M_m_bvalid,
       CAN_FIRE_ddr4_A_M_m_rvalid,
       CAN_FIRE_ddr4_A_M_m_wready,
       CAN_FIRE_ddr4_B_M_m_arready,
       CAN_FIRE_ddr4_B_M_m_awready,
       CAN_FIRE_ddr4_B_M_m_bvalid,
       CAN_FIRE_ddr4_B_M_m_rvalid,
       CAN_FIRE_ddr4_B_M_m_wready,
       CAN_FIRE_ddr4_C_M_m_arready,
       CAN_FIRE_ddr4_C_M_m_awready,
       CAN_FIRE_ddr4_C_M_m_bvalid,
       CAN_FIRE_ddr4_C_M_m_rvalid,
       CAN_FIRE_ddr4_C_M_m_wready,
       CAN_FIRE_ddr4_D_M_m_arready,
       CAN_FIRE_ddr4_D_M_m_awready,
       CAN_FIRE_ddr4_D_M_m_bvalid,
       CAN_FIRE_ddr4_D_M_m_rvalid,
       CAN_FIRE_ddr4_D_M_m_wready,
       CAN_FIRE_host_AXI4L_S_m_arvalid,
       CAN_FIRE_host_AXI4L_S_m_awvalid,
       CAN_FIRE_host_AXI4L_S_m_bready,
       CAN_FIRE_host_AXI4L_S_m_rready,
       CAN_FIRE_host_AXI4L_S_m_wvalid,
       CAN_FIRE_host_AXI4_S_m_arvalid,
       CAN_FIRE_host_AXI4_S_m_awvalid,
       CAN_FIRE_host_AXI4_S_m_bready,
       CAN_FIRE_host_AXI4_S_m_rready,
       CAN_FIRE_host_AXI4_S_m_wvalid,
       CAN_FIRE_m_ddr4s_ready,
       CAN_FIRE_m_glcount0,
       CAN_FIRE_m_glcount1,
       CAN_FIRE_m_vdip,
       WILL_FIRE_RL_rl_rd_addr_channel,
       WILL_FIRE_RL_rl_rd_data_channel,
       WILL_FIRE_RL_rl_wr_addr_channel,
       WILL_FIRE_RL_rl_wr_data_channel,
       WILL_FIRE_RL_rl_wr_response_channel,
       WILL_FIRE_ddr4_A_M_m_arready,
       WILL_FIRE_ddr4_A_M_m_awready,
       WILL_FIRE_ddr4_A_M_m_bvalid,
       WILL_FIRE_ddr4_A_M_m_rvalid,
       WILL_FIRE_ddr4_A_M_m_wready,
       WILL_FIRE_ddr4_B_M_m_arready,
       WILL_FIRE_ddr4_B_M_m_awready,
       WILL_FIRE_ddr4_B_M_m_bvalid,
       WILL_FIRE_ddr4_B_M_m_rvalid,
       WILL_FIRE_ddr4_B_M_m_wready,
       WILL_FIRE_ddr4_C_M_m_arready,
       WILL_FIRE_ddr4_C_M_m_awready,
       WILL_FIRE_ddr4_C_M_m_bvalid,
       WILL_FIRE_ddr4_C_M_m_rvalid,
       WILL_FIRE_ddr4_C_M_m_wready,
       WILL_FIRE_ddr4_D_M_m_arready,
       WILL_FIRE_ddr4_D_M_m_awready,
       WILL_FIRE_ddr4_D_M_m_bvalid,
       WILL_FIRE_ddr4_D_M_m_rvalid,
       WILL_FIRE_ddr4_D_M_m_wready,
       WILL_FIRE_host_AXI4L_S_m_arvalid,
       WILL_FIRE_host_AXI4L_S_m_awvalid,
       WILL_FIRE_host_AXI4L_S_m_bready,
       WILL_FIRE_host_AXI4L_S_m_rready,
       WILL_FIRE_host_AXI4L_S_m_wvalid,
       WILL_FIRE_host_AXI4_S_m_arvalid,
       WILL_FIRE_host_AXI4_S_m_awvalid,
       WILL_FIRE_host_AXI4_S_m_bready,
       WILL_FIRE_host_AXI4_S_m_rready,
       WILL_FIRE_host_AXI4_S_m_wvalid,
       WILL_FIRE_m_ddr4s_ready,
       WILL_FIRE_m_glcount0,
       WILL_FIRE_m_glcount1,
       WILL_FIRE_m_vdip;

  // action method host_AXI4_S_m_awvalid
  assign CAN_FIRE_host_AXI4_S_m_awvalid = 1'd1 ;
  assign WILL_FIRE_host_AXI4_S_m_awvalid = 1'd1 ;

  // value method host_AXI4_S_m_awready
  assign host_AXI4_S_awready = fabric$v_from_masters_0_awready ;

  // action method host_AXI4_S_m_wvalid
  assign CAN_FIRE_host_AXI4_S_m_wvalid = 1'd1 ;
  assign WILL_FIRE_host_AXI4_S_m_wvalid = 1'd1 ;

  // value method host_AXI4_S_m_wready
  assign host_AXI4_S_wready = fabric$v_from_masters_0_wready ;

  // value method host_AXI4_S_m_bvalid
  assign host_AXI4_S_bvalid = fabric$v_from_masters_0_bvalid ;

  // value method host_AXI4_S_m_bid
  assign host_AXI4_S_bid = fabric$v_from_masters_0_bid ;

  // value method host_AXI4_S_m_bresp
  assign host_AXI4_S_bresp = fabric$v_from_masters_0_bresp ;

  // action method host_AXI4_S_m_bready
  assign CAN_FIRE_host_AXI4_S_m_bready = 1'd1 ;
  assign WILL_FIRE_host_AXI4_S_m_bready = 1'd1 ;

  // action method host_AXI4_S_m_arvalid
  assign CAN_FIRE_host_AXI4_S_m_arvalid = 1'd1 ;
  assign WILL_FIRE_host_AXI4_S_m_arvalid = 1'd1 ;

  // value method host_AXI4_S_m_arready
  assign host_AXI4_S_arready = fabric$v_from_masters_0_arready ;

  // value method host_AXI4_S_m_rvalid
  assign host_AXI4_S_rvalid = fabric$v_from_masters_0_rvalid ;

  // value method host_AXI4_S_m_rid
  assign host_AXI4_S_rid = fabric$v_from_masters_0_rid ;

  // value method host_AXI4_S_m_rdata
  assign host_AXI4_S_rdata = fabric$v_from_masters_0_rdata ;

  // value method host_AXI4_S_m_rresp
  assign host_AXI4_S_rresp = fabric$v_from_masters_0_rresp ;

  // value method host_AXI4_S_m_rlast
  assign host_AXI4_S_rlast = fabric$v_from_masters_0_rlast ;

  // action method host_AXI4_S_m_rready
  assign CAN_FIRE_host_AXI4_S_m_rready = 1'd1 ;
  assign WILL_FIRE_host_AXI4_S_m_rready = 1'd1 ;

  // action method host_AXI4L_S_m_awvalid
  assign CAN_FIRE_host_AXI4L_S_m_awvalid = 1'd1 ;
  assign WILL_FIRE_host_AXI4L_S_m_awvalid = 1'd1 ;

  // value method host_AXI4L_S_m_awready
  assign host_AXI4L_S_awready =
	     adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_awready ;

  // action method host_AXI4L_S_m_wvalid
  assign CAN_FIRE_host_AXI4L_S_m_wvalid = 1'd1 ;
  assign WILL_FIRE_host_AXI4L_S_m_wvalid = 1'd1 ;

  // value method host_AXI4L_S_m_wready
  assign host_AXI4L_S_wready = adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_wready ;

  // value method host_AXI4L_S_m_bvalid
  assign host_AXI4L_S_bvalid = adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_bvalid ;

  // value method host_AXI4L_S_m_bresp
  assign host_AXI4L_S_bresp = adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_bresp ;

  // action method host_AXI4L_S_m_bready
  assign CAN_FIRE_host_AXI4L_S_m_bready = 1'd1 ;
  assign WILL_FIRE_host_AXI4L_S_m_bready = 1'd1 ;

  // action method host_AXI4L_S_m_arvalid
  assign CAN_FIRE_host_AXI4L_S_m_arvalid = 1'd1 ;
  assign WILL_FIRE_host_AXI4L_S_m_arvalid = 1'd1 ;

  // value method host_AXI4L_S_m_arready
  assign host_AXI4L_S_arready =
	     adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_arready ;

  // value method host_AXI4L_S_m_rvalid
  assign host_AXI4L_S_rvalid = adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_rvalid ;

  // value method host_AXI4L_S_m_rresp
  assign host_AXI4L_S_rresp = adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_rresp ;

  // value method host_AXI4L_S_m_rdata
  assign host_AXI4L_S_rdata = adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_rdata ;

  // action method host_AXI4L_S_m_rready
  assign CAN_FIRE_host_AXI4L_S_m_rready = 1'd1 ;
  assign WILL_FIRE_host_AXI4L_S_m_rready = 1'd1 ;

  // value method ddr4_A_M_m_awvalid
  assign ddr4_A_M_awvalid = fabric$v_to_slaves_0_awvalid ;

  // value method ddr4_A_M_m_awid
  assign ddr4_A_M_awid = fabric$v_to_slaves_0_awid ;

  // value method ddr4_A_M_m_awaddr
  assign ddr4_A_M_awaddr = fabric$v_to_slaves_0_awaddr ;

  // value method ddr4_A_M_m_awlen
  assign ddr4_A_M_awlen = fabric$v_to_slaves_0_awlen ;

  // value method ddr4_A_M_m_awsize
  assign ddr4_A_M_awsize = fabric$v_to_slaves_0_awsize ;

  // value method ddr4_A_M_m_awburst
  assign ddr4_A_M_awburst = fabric$v_to_slaves_0_awburst ;

  // value method ddr4_A_M_m_awlock
  assign ddr4_A_M_awlock = fabric$v_to_slaves_0_awlock ;

  // value method ddr4_A_M_m_awcache
  assign ddr4_A_M_awcache = fabric$v_to_slaves_0_awcache ;

  // value method ddr4_A_M_m_awprot
  assign ddr4_A_M_awprot = fabric$v_to_slaves_0_awprot ;

  // value method ddr4_A_M_m_awqos
  assign ddr4_A_M_awqos = fabric$v_to_slaves_0_awqos ;

  // value method ddr4_A_M_m_awregion
  assign ddr4_A_M_awregion = fabric$v_to_slaves_0_awregion ;

  // action method ddr4_A_M_m_awready
  assign CAN_FIRE_ddr4_A_M_m_awready = 1'd1 ;
  assign WILL_FIRE_ddr4_A_M_m_awready = 1'd1 ;

  // value method ddr4_A_M_m_wvalid
  assign ddr4_A_M_wvalid = fabric$v_to_slaves_0_wvalid ;

  // value method ddr4_A_M_m_wdata
  assign ddr4_A_M_wdata = fabric$v_to_slaves_0_wdata ;

  // value method ddr4_A_M_m_wstrb
  assign ddr4_A_M_wstrb = fabric$v_to_slaves_0_wstrb ;

  // value method ddr4_A_M_m_wlast
  assign ddr4_A_M_wlast = fabric$v_to_slaves_0_wlast ;

  // action method ddr4_A_M_m_wready
  assign CAN_FIRE_ddr4_A_M_m_wready = 1'd1 ;
  assign WILL_FIRE_ddr4_A_M_m_wready = 1'd1 ;

  // action method ddr4_A_M_m_bvalid
  assign CAN_FIRE_ddr4_A_M_m_bvalid = 1'd1 ;
  assign WILL_FIRE_ddr4_A_M_m_bvalid = 1'd1 ;

  // value method ddr4_A_M_m_bready
  assign ddr4_A_M_bready = fabric$v_to_slaves_0_bready ;

  // value method ddr4_A_M_m_arvalid
  assign ddr4_A_M_arvalid = fabric$v_to_slaves_0_arvalid ;

  // value method ddr4_A_M_m_arid
  assign ddr4_A_M_arid = fabric$v_to_slaves_0_arid ;

  // value method ddr4_A_M_m_araddr
  assign ddr4_A_M_araddr = fabric$v_to_slaves_0_araddr ;

  // value method ddr4_A_M_m_arlen
  assign ddr4_A_M_arlen = fabric$v_to_slaves_0_arlen ;

  // value method ddr4_A_M_m_arsize
  assign ddr4_A_M_arsize = fabric$v_to_slaves_0_arsize ;

  // value method ddr4_A_M_m_arburst
  assign ddr4_A_M_arburst = fabric$v_to_slaves_0_arburst ;

  // value method ddr4_A_M_m_arlock
  assign ddr4_A_M_arlock = fabric$v_to_slaves_0_arlock ;

  // value method ddr4_A_M_m_arcache
  assign ddr4_A_M_arcache = fabric$v_to_slaves_0_arcache ;

  // value method ddr4_A_M_m_arprot
  assign ddr4_A_M_arprot = fabric$v_to_slaves_0_arprot ;

  // value method ddr4_A_M_m_arqos
  assign ddr4_A_M_arqos = fabric$v_to_slaves_0_arqos ;

  // value method ddr4_A_M_m_arregion
  assign ddr4_A_M_arregion = fabric$v_to_slaves_0_arregion ;

  // action method ddr4_A_M_m_arready
  assign CAN_FIRE_ddr4_A_M_m_arready = 1'd1 ;
  assign WILL_FIRE_ddr4_A_M_m_arready = 1'd1 ;

  // action method ddr4_A_M_m_rvalid
  assign CAN_FIRE_ddr4_A_M_m_rvalid = 1'd1 ;
  assign WILL_FIRE_ddr4_A_M_m_rvalid = 1'd1 ;

  // value method ddr4_A_M_m_rready
  assign ddr4_A_M_rready = fabric$v_to_slaves_0_rready ;

  // value method ddr4_B_M_m_awvalid
  assign ddr4_B_M_awvalid = fabric$v_to_slaves_1_awvalid ;

  // value method ddr4_B_M_m_awid
  assign ddr4_B_M_awid = fabric$v_to_slaves_1_awid ;

  // value method ddr4_B_M_m_awaddr
  assign ddr4_B_M_awaddr = fabric$v_to_slaves_1_awaddr ;

  // value method ddr4_B_M_m_awlen
  assign ddr4_B_M_awlen = fabric$v_to_slaves_1_awlen ;

  // value method ddr4_B_M_m_awsize
  assign ddr4_B_M_awsize = fabric$v_to_slaves_1_awsize ;

  // value method ddr4_B_M_m_awburst
  assign ddr4_B_M_awburst = fabric$v_to_slaves_1_awburst ;

  // value method ddr4_B_M_m_awlock
  assign ddr4_B_M_awlock = fabric$v_to_slaves_1_awlock ;

  // value method ddr4_B_M_m_awcache
  assign ddr4_B_M_awcache = fabric$v_to_slaves_1_awcache ;

  // value method ddr4_B_M_m_awprot
  assign ddr4_B_M_awprot = fabric$v_to_slaves_1_awprot ;

  // value method ddr4_B_M_m_awqos
  assign ddr4_B_M_awqos = fabric$v_to_slaves_1_awqos ;

  // value method ddr4_B_M_m_awregion
  assign ddr4_B_M_awregion = fabric$v_to_slaves_1_awregion ;

  // action method ddr4_B_M_m_awready
  assign CAN_FIRE_ddr4_B_M_m_awready = 1'd1 ;
  assign WILL_FIRE_ddr4_B_M_m_awready = 1'd1 ;

  // value method ddr4_B_M_m_wvalid
  assign ddr4_B_M_wvalid = fabric$v_to_slaves_1_wvalid ;

  // value method ddr4_B_M_m_wdata
  assign ddr4_B_M_wdata = fabric$v_to_slaves_1_wdata ;

  // value method ddr4_B_M_m_wstrb
  assign ddr4_B_M_wstrb = fabric$v_to_slaves_1_wstrb ;

  // value method ddr4_B_M_m_wlast
  assign ddr4_B_M_wlast = fabric$v_to_slaves_1_wlast ;

  // action method ddr4_B_M_m_wready
  assign CAN_FIRE_ddr4_B_M_m_wready = 1'd1 ;
  assign WILL_FIRE_ddr4_B_M_m_wready = 1'd1 ;

  // action method ddr4_B_M_m_bvalid
  assign CAN_FIRE_ddr4_B_M_m_bvalid = 1'd1 ;
  assign WILL_FIRE_ddr4_B_M_m_bvalid = 1'd1 ;

  // value method ddr4_B_M_m_bready
  assign ddr4_B_M_bready = fabric$v_to_slaves_1_bready ;

  // value method ddr4_B_M_m_arvalid
  assign ddr4_B_M_arvalid = fabric$v_to_slaves_1_arvalid ;

  // value method ddr4_B_M_m_arid
  assign ddr4_B_M_arid = fabric$v_to_slaves_1_arid ;

  // value method ddr4_B_M_m_araddr
  assign ddr4_B_M_araddr = fabric$v_to_slaves_1_araddr ;

  // value method ddr4_B_M_m_arlen
  assign ddr4_B_M_arlen = fabric$v_to_slaves_1_arlen ;

  // value method ddr4_B_M_m_arsize
  assign ddr4_B_M_arsize = fabric$v_to_slaves_1_arsize ;

  // value method ddr4_B_M_m_arburst
  assign ddr4_B_M_arburst = fabric$v_to_slaves_1_arburst ;

  // value method ddr4_B_M_m_arlock
  assign ddr4_B_M_arlock = fabric$v_to_slaves_1_arlock ;

  // value method ddr4_B_M_m_arcache
  assign ddr4_B_M_arcache = fabric$v_to_slaves_1_arcache ;

  // value method ddr4_B_M_m_arprot
  assign ddr4_B_M_arprot = fabric$v_to_slaves_1_arprot ;

  // value method ddr4_B_M_m_arqos
  assign ddr4_B_M_arqos = fabric$v_to_slaves_1_arqos ;

  // value method ddr4_B_M_m_arregion
  assign ddr4_B_M_arregion = fabric$v_to_slaves_1_arregion ;

  // action method ddr4_B_M_m_arready
  assign CAN_FIRE_ddr4_B_M_m_arready = 1'd1 ;
  assign WILL_FIRE_ddr4_B_M_m_arready = 1'd1 ;

  // action method ddr4_B_M_m_rvalid
  assign CAN_FIRE_ddr4_B_M_m_rvalid = 1'd1 ;
  assign WILL_FIRE_ddr4_B_M_m_rvalid = 1'd1 ;

  // value method ddr4_B_M_m_rready
  assign ddr4_B_M_rready = fabric$v_to_slaves_1_rready ;

  // value method ddr4_C_M_m_awvalid
  assign ddr4_C_M_awvalid = 1'd0 ;

  // value method ddr4_C_M_m_awid
  assign ddr4_C_M_awid = 16'hAAAA ;

  // value method ddr4_C_M_m_awaddr
  assign ddr4_C_M_awaddr = 64'hAAAAAAAAAAAAAAAA ;

  // value method ddr4_C_M_m_awlen
  assign ddr4_C_M_awlen = 8'hAA ;

  // value method ddr4_C_M_m_awsize
  assign ddr4_C_M_awsize = 3'h2 ;

  // value method ddr4_C_M_m_awburst
  assign ddr4_C_M_awburst = 2'h2 ;

  // value method ddr4_C_M_m_awlock
  assign ddr4_C_M_awlock = 1'h0 ;

  // value method ddr4_C_M_m_awcache
  assign ddr4_C_M_awcache = 4'hA ;

  // value method ddr4_C_M_m_awprot
  assign ddr4_C_M_awprot = 3'h2 ;

  // value method ddr4_C_M_m_awqos
  assign ddr4_C_M_awqos = 4'hA ;

  // value method ddr4_C_M_m_awregion
  assign ddr4_C_M_awregion = 4'hA ;

  // action method ddr4_C_M_m_awready
  assign CAN_FIRE_ddr4_C_M_m_awready = 1'd1 ;
  assign WILL_FIRE_ddr4_C_M_m_awready = 1'd1 ;

  // value method ddr4_C_M_m_wvalid
  assign ddr4_C_M_wvalid = 1'd0 ;

  // value method ddr4_C_M_m_wdata
  assign ddr4_C_M_wdata =
	     512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ;

  // value method ddr4_C_M_m_wstrb
  assign ddr4_C_M_wstrb = 64'hAAAAAAAAAAAAAAAA ;

  // value method ddr4_C_M_m_wlast
  assign ddr4_C_M_wlast = 1'h0 ;

  // action method ddr4_C_M_m_wready
  assign CAN_FIRE_ddr4_C_M_m_wready = 1'd1 ;
  assign WILL_FIRE_ddr4_C_M_m_wready = 1'd1 ;

  // action method ddr4_C_M_m_bvalid
  assign CAN_FIRE_ddr4_C_M_m_bvalid = 1'd1 ;
  assign WILL_FIRE_ddr4_C_M_m_bvalid = 1'd1 ;

  // value method ddr4_C_M_m_bready
  assign ddr4_C_M_bready = 1'd0 ;

  // value method ddr4_C_M_m_arvalid
  assign ddr4_C_M_arvalid = 1'd0 ;

  // value method ddr4_C_M_m_arid
  assign ddr4_C_M_arid = 16'hAAAA ;

  // value method ddr4_C_M_m_araddr
  assign ddr4_C_M_araddr = 64'hAAAAAAAAAAAAAAAA ;

  // value method ddr4_C_M_m_arlen
  assign ddr4_C_M_arlen = 8'hAA ;

  // value method ddr4_C_M_m_arsize
  assign ddr4_C_M_arsize = 3'h2 ;

  // value method ddr4_C_M_m_arburst
  assign ddr4_C_M_arburst = 2'h2 ;

  // value method ddr4_C_M_m_arlock
  assign ddr4_C_M_arlock = 1'h0 ;

  // value method ddr4_C_M_m_arcache
  assign ddr4_C_M_arcache = 4'hA ;

  // value method ddr4_C_M_m_arprot
  assign ddr4_C_M_arprot = 3'h2 ;

  // value method ddr4_C_M_m_arqos
  assign ddr4_C_M_arqos = 4'hA ;

  // value method ddr4_C_M_m_arregion
  assign ddr4_C_M_arregion = 4'hA ;

  // action method ddr4_C_M_m_arready
  assign CAN_FIRE_ddr4_C_M_m_arready = 1'd1 ;
  assign WILL_FIRE_ddr4_C_M_m_arready = 1'd1 ;

  // action method ddr4_C_M_m_rvalid
  assign CAN_FIRE_ddr4_C_M_m_rvalid = 1'd1 ;
  assign WILL_FIRE_ddr4_C_M_m_rvalid = 1'd1 ;

  // value method ddr4_C_M_m_rready
  assign ddr4_C_M_rready = 1'd0 ;

  // value method ddr4_D_M_m_awvalid
  assign ddr4_D_M_awvalid = 1'd0 ;

  // value method ddr4_D_M_m_awid
  assign ddr4_D_M_awid = 16'hAAAA ;

  // value method ddr4_D_M_m_awaddr
  assign ddr4_D_M_awaddr = 64'hAAAAAAAAAAAAAAAA ;

  // value method ddr4_D_M_m_awlen
  assign ddr4_D_M_awlen = 8'hAA ;

  // value method ddr4_D_M_m_awsize
  assign ddr4_D_M_awsize = 3'h2 ;

  // value method ddr4_D_M_m_awburst
  assign ddr4_D_M_awburst = 2'h2 ;

  // value method ddr4_D_M_m_awlock
  assign ddr4_D_M_awlock = 1'h0 ;

  // value method ddr4_D_M_m_awcache
  assign ddr4_D_M_awcache = 4'hA ;

  // value method ddr4_D_M_m_awprot
  assign ddr4_D_M_awprot = 3'h2 ;

  // value method ddr4_D_M_m_awqos
  assign ddr4_D_M_awqos = 4'hA ;

  // value method ddr4_D_M_m_awregion
  assign ddr4_D_M_awregion = 4'hA ;

  // action method ddr4_D_M_m_awready
  assign CAN_FIRE_ddr4_D_M_m_awready = 1'd1 ;
  assign WILL_FIRE_ddr4_D_M_m_awready = 1'd1 ;

  // value method ddr4_D_M_m_wvalid
  assign ddr4_D_M_wvalid = 1'd0 ;

  // value method ddr4_D_M_m_wdata
  assign ddr4_D_M_wdata =
	     512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ;

  // value method ddr4_D_M_m_wstrb
  assign ddr4_D_M_wstrb = 64'hAAAAAAAAAAAAAAAA ;

  // value method ddr4_D_M_m_wlast
  assign ddr4_D_M_wlast = 1'h0 ;

  // action method ddr4_D_M_m_wready
  assign CAN_FIRE_ddr4_D_M_m_wready = 1'd1 ;
  assign WILL_FIRE_ddr4_D_M_m_wready = 1'd1 ;

  // action method ddr4_D_M_m_bvalid
  assign CAN_FIRE_ddr4_D_M_m_bvalid = 1'd1 ;
  assign WILL_FIRE_ddr4_D_M_m_bvalid = 1'd1 ;

  // value method ddr4_D_M_m_bready
  assign ddr4_D_M_bready = 1'd0 ;

  // value method ddr4_D_M_m_arvalid
  assign ddr4_D_M_arvalid = 1'd0 ;

  // value method ddr4_D_M_m_arid
  assign ddr4_D_M_arid = 16'hAAAA ;

  // value method ddr4_D_M_m_araddr
  assign ddr4_D_M_araddr = 64'hAAAAAAAAAAAAAAAA ;

  // value method ddr4_D_M_m_arlen
  assign ddr4_D_M_arlen = 8'hAA ;

  // value method ddr4_D_M_m_arsize
  assign ddr4_D_M_arsize = 3'h2 ;

  // value method ddr4_D_M_m_arburst
  assign ddr4_D_M_arburst = 2'h2 ;

  // value method ddr4_D_M_m_arlock
  assign ddr4_D_M_arlock = 1'h0 ;

  // value method ddr4_D_M_m_arcache
  assign ddr4_D_M_arcache = 4'hA ;

  // value method ddr4_D_M_m_arprot
  assign ddr4_D_M_arprot = 3'h2 ;

  // value method ddr4_D_M_m_arqos
  assign ddr4_D_M_arqos = 4'hA ;

  // value method ddr4_D_M_m_arregion
  assign ddr4_D_M_arregion = 4'hA ;

  // action method ddr4_D_M_m_arready
  assign CAN_FIRE_ddr4_D_M_m_arready = 1'd1 ;
  assign WILL_FIRE_ddr4_D_M_m_arready = 1'd1 ;

  // action method ddr4_D_M_m_rvalid
  assign CAN_FIRE_ddr4_D_M_m_rvalid = 1'd1 ;
  assign WILL_FIRE_ddr4_D_M_m_rvalid = 1'd1 ;

  // value method ddr4_D_M_m_rready
  assign ddr4_D_M_rready = 1'd0 ;

  // action method m_ddr4s_ready
  assign CAN_FIRE_m_ddr4s_ready = 1'd1 ;
  assign WILL_FIRE_m_ddr4s_ready = 1'd1 ;

  // action method m_glcount0
  assign CAN_FIRE_m_glcount0 = 1'd1 ;
  assign WILL_FIRE_m_glcount0 = 1'd1 ;

  // action method m_glcount1
  assign CAN_FIRE_m_glcount1 = 1'd1 ;
  assign WILL_FIRE_m_glcount1 = 1'd1 ;

  // value method m_vled
  assign m_vled = rg_vled ;

  // action method m_vdip
  assign CAN_FIRE_m_vdip = 1'd1 ;
  assign WILL_FIRE_m_vdip = 1'd1 ;

  // value method m_shutdown_received
  assign m_shutdown_received = rg_shutdown_received ;
  assign RDY_m_shutdown_received = 1'd1 ;

  // submodule adapter_AXI4L_S_to_AXI4_M
  mkAXI4L_S_to_AXI4_M_Adapter_synth adapter_AXI4L_S_to_AXI4_M(.CLK(CLK),
							      .RST_N(RST_N),
							      .ifc_AXI4L_S_araddr(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_araddr),
							      .ifc_AXI4L_S_arprot(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_arprot),
							      .ifc_AXI4L_S_arvalid(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_arvalid),
							      .ifc_AXI4L_S_awaddr(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_awaddr),
							      .ifc_AXI4L_S_awprot(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_awprot),
							      .ifc_AXI4L_S_awvalid(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_awvalid),
							      .ifc_AXI4L_S_bready(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_bready),
							      .ifc_AXI4L_S_rready(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_rready),
							      .ifc_AXI4L_S_wdata(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_wdata),
							      .ifc_AXI4L_S_wstrb(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_wstrb),
							      .ifc_AXI4L_S_wvalid(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_wvalid),
							      .ifc_AXI4_M_arready(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_arready),
							      .ifc_AXI4_M_awready(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_awready),
							      .ifc_AXI4_M_bid(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_bid),
							      .ifc_AXI4_M_bresp(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_bresp),
							      .ifc_AXI4_M_bvalid(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_bvalid),
							      .ifc_AXI4_M_rdata(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_rdata),
							      .ifc_AXI4_M_rid(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_rid),
							      .ifc_AXI4_M_rlast(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_rlast),
							      .ifc_AXI4_M_rresp(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_rresp),
							      .ifc_AXI4_M_rvalid(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_rvalid),
							      .ifc_AXI4_M_wready(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_wready),
							      .ifc_AXI4L_S_awready(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_awready),
							      .ifc_AXI4L_S_wready(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_wready),
							      .ifc_AXI4L_S_bvalid(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_bvalid),
							      .ifc_AXI4L_S_bresp(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_bresp),
							      .ifc_AXI4L_S_arready(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_arready),
							      .ifc_AXI4L_S_rvalid(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_rvalid),
							      .ifc_AXI4L_S_rresp(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_rresp),
							      .ifc_AXI4L_S_rdata(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_rdata),
							      .ifc_AXI4_M_awvalid(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_awvalid),
							      .ifc_AXI4_M_awid(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_awid),
							      .ifc_AXI4_M_awaddr(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_awaddr),
							      .ifc_AXI4_M_awlen(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_awlen),
							      .ifc_AXI4_M_awsize(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_awsize),
							      .ifc_AXI4_M_awburst(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_awburst),
							      .ifc_AXI4_M_awlock(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_awlock),
							      .ifc_AXI4_M_awcache(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_awcache),
							      .ifc_AXI4_M_awprot(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_awprot),
							      .ifc_AXI4_M_awqos(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_awqos),
							      .ifc_AXI4_M_awregion(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_awregion),
							      .ifc_AXI4_M_wvalid(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_wvalid),
							      .ifc_AXI4_M_wdata(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_wdata),
							      .ifc_AXI4_M_wstrb(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_wstrb),
							      .ifc_AXI4_M_wlast(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_wlast),
							      .ifc_AXI4_M_bready(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_bready),
							      .ifc_AXI4_M_arvalid(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_arvalid),
							      .ifc_AXI4_M_arid(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_arid),
							      .ifc_AXI4_M_araddr(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_araddr),
							      .ifc_AXI4_M_arlen(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_arlen),
							      .ifc_AXI4_M_arsize(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_arsize),
							      .ifc_AXI4_M_arburst(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_arburst),
							      .ifc_AXI4_M_arlock(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_arlock),
							      .ifc_AXI4_M_arcache(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_arcache),
							      .ifc_AXI4_M_arprot(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_arprot),
							      .ifc_AXI4_M_arqos(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_arqos),
							      .ifc_AXI4_M_arregion(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_arregion),
							      .ifc_AXI4_M_rready(adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_rready));

  // submodule fabric
  mkAXI4_16_64_512_0_Fabric_2_2 fabric(.CLK(CLK),
				       .RST_N(RST_N),
				       .set_verbosity_verbosity(fabric$set_verbosity_verbosity),
				       .v_from_masters_0_araddr(fabric$v_from_masters_0_araddr),
				       .v_from_masters_0_arburst(fabric$v_from_masters_0_arburst),
				       .v_from_masters_0_arcache(fabric$v_from_masters_0_arcache),
				       .v_from_masters_0_arid(fabric$v_from_masters_0_arid),
				       .v_from_masters_0_arlen(fabric$v_from_masters_0_arlen),
				       .v_from_masters_0_arlock(fabric$v_from_masters_0_arlock),
				       .v_from_masters_0_arprot(fabric$v_from_masters_0_arprot),
				       .v_from_masters_0_arqos(fabric$v_from_masters_0_arqos),
				       .v_from_masters_0_arregion(fabric$v_from_masters_0_arregion),
				       .v_from_masters_0_arsize(fabric$v_from_masters_0_arsize),
				       .v_from_masters_0_arvalid(fabric$v_from_masters_0_arvalid),
				       .v_from_masters_0_awaddr(fabric$v_from_masters_0_awaddr),
				       .v_from_masters_0_awburst(fabric$v_from_masters_0_awburst),
				       .v_from_masters_0_awcache(fabric$v_from_masters_0_awcache),
				       .v_from_masters_0_awid(fabric$v_from_masters_0_awid),
				       .v_from_masters_0_awlen(fabric$v_from_masters_0_awlen),
				       .v_from_masters_0_awlock(fabric$v_from_masters_0_awlock),
				       .v_from_masters_0_awprot(fabric$v_from_masters_0_awprot),
				       .v_from_masters_0_awqos(fabric$v_from_masters_0_awqos),
				       .v_from_masters_0_awregion(fabric$v_from_masters_0_awregion),
				       .v_from_masters_0_awsize(fabric$v_from_masters_0_awsize),
				       .v_from_masters_0_awvalid(fabric$v_from_masters_0_awvalid),
				       .v_from_masters_0_bready(fabric$v_from_masters_0_bready),
				       .v_from_masters_0_rready(fabric$v_from_masters_0_rready),
				       .v_from_masters_0_wdata(fabric$v_from_masters_0_wdata),
				       .v_from_masters_0_wlast(fabric$v_from_masters_0_wlast),
				       .v_from_masters_0_wstrb(fabric$v_from_masters_0_wstrb),
				       .v_from_masters_0_wvalid(fabric$v_from_masters_0_wvalid),
				       .v_from_masters_1_araddr(fabric$v_from_masters_1_araddr),
				       .v_from_masters_1_arburst(fabric$v_from_masters_1_arburst),
				       .v_from_masters_1_arcache(fabric$v_from_masters_1_arcache),
				       .v_from_masters_1_arid(fabric$v_from_masters_1_arid),
				       .v_from_masters_1_arlen(fabric$v_from_masters_1_arlen),
				       .v_from_masters_1_arlock(fabric$v_from_masters_1_arlock),
				       .v_from_masters_1_arprot(fabric$v_from_masters_1_arprot),
				       .v_from_masters_1_arqos(fabric$v_from_masters_1_arqos),
				       .v_from_masters_1_arregion(fabric$v_from_masters_1_arregion),
				       .v_from_masters_1_arsize(fabric$v_from_masters_1_arsize),
				       .v_from_masters_1_arvalid(fabric$v_from_masters_1_arvalid),
				       .v_from_masters_1_awaddr(fabric$v_from_masters_1_awaddr),
				       .v_from_masters_1_awburst(fabric$v_from_masters_1_awburst),
				       .v_from_masters_1_awcache(fabric$v_from_masters_1_awcache),
				       .v_from_masters_1_awid(fabric$v_from_masters_1_awid),
				       .v_from_masters_1_awlen(fabric$v_from_masters_1_awlen),
				       .v_from_masters_1_awlock(fabric$v_from_masters_1_awlock),
				       .v_from_masters_1_awprot(fabric$v_from_masters_1_awprot),
				       .v_from_masters_1_awqos(fabric$v_from_masters_1_awqos),
				       .v_from_masters_1_awregion(fabric$v_from_masters_1_awregion),
				       .v_from_masters_1_awsize(fabric$v_from_masters_1_awsize),
				       .v_from_masters_1_awvalid(fabric$v_from_masters_1_awvalid),
				       .v_from_masters_1_bready(fabric$v_from_masters_1_bready),
				       .v_from_masters_1_rready(fabric$v_from_masters_1_rready),
				       .v_from_masters_1_wdata(fabric$v_from_masters_1_wdata),
				       .v_from_masters_1_wlast(fabric$v_from_masters_1_wlast),
				       .v_from_masters_1_wstrb(fabric$v_from_masters_1_wstrb),
				       .v_from_masters_1_wvalid(fabric$v_from_masters_1_wvalid),
				       .v_to_slaves_0_arready(fabric$v_to_slaves_0_arready),
				       .v_to_slaves_0_awready(fabric$v_to_slaves_0_awready),
				       .v_to_slaves_0_bid(fabric$v_to_slaves_0_bid),
				       .v_to_slaves_0_bresp(fabric$v_to_slaves_0_bresp),
				       .v_to_slaves_0_bvalid(fabric$v_to_slaves_0_bvalid),
				       .v_to_slaves_0_rdata(fabric$v_to_slaves_0_rdata),
				       .v_to_slaves_0_rid(fabric$v_to_slaves_0_rid),
				       .v_to_slaves_0_rlast(fabric$v_to_slaves_0_rlast),
				       .v_to_slaves_0_rresp(fabric$v_to_slaves_0_rresp),
				       .v_to_slaves_0_rvalid(fabric$v_to_slaves_0_rvalid),
				       .v_to_slaves_0_wready(fabric$v_to_slaves_0_wready),
				       .v_to_slaves_1_arready(fabric$v_to_slaves_1_arready),
				       .v_to_slaves_1_awready(fabric$v_to_slaves_1_awready),
				       .v_to_slaves_1_bid(fabric$v_to_slaves_1_bid),
				       .v_to_slaves_1_bresp(fabric$v_to_slaves_1_bresp),
				       .v_to_slaves_1_bvalid(fabric$v_to_slaves_1_bvalid),
				       .v_to_slaves_1_rdata(fabric$v_to_slaves_1_rdata),
				       .v_to_slaves_1_rid(fabric$v_to_slaves_1_rid),
				       .v_to_slaves_1_rlast(fabric$v_to_slaves_1_rlast),
				       .v_to_slaves_1_rresp(fabric$v_to_slaves_1_rresp),
				       .v_to_slaves_1_rvalid(fabric$v_to_slaves_1_rvalid),
				       .v_to_slaves_1_wready(fabric$v_to_slaves_1_wready),
				       .EN_reset(fabric$EN_reset),
				       .EN_set_verbosity(fabric$EN_set_verbosity),
				       .RDY_reset(),
				       .RDY_set_verbosity(),
				       .v_from_masters_0_awready(fabric$v_from_masters_0_awready),
				       .v_from_masters_0_wready(fabric$v_from_masters_0_wready),
				       .v_from_masters_0_bvalid(fabric$v_from_masters_0_bvalid),
				       .v_from_masters_0_bid(fabric$v_from_masters_0_bid),
				       .v_from_masters_0_bresp(fabric$v_from_masters_0_bresp),
				       .v_from_masters_0_arready(fabric$v_from_masters_0_arready),
				       .v_from_masters_0_rvalid(fabric$v_from_masters_0_rvalid),
				       .v_from_masters_0_rid(fabric$v_from_masters_0_rid),
				       .v_from_masters_0_rdata(fabric$v_from_masters_0_rdata),
				       .v_from_masters_0_rresp(fabric$v_from_masters_0_rresp),
				       .v_from_masters_0_rlast(fabric$v_from_masters_0_rlast),
				       .v_from_masters_1_awready(fabric$v_from_masters_1_awready),
				       .v_from_masters_1_wready(fabric$v_from_masters_1_wready),
				       .v_from_masters_1_bvalid(fabric$v_from_masters_1_bvalid),
				       .v_from_masters_1_bid(fabric$v_from_masters_1_bid),
				       .v_from_masters_1_bresp(fabric$v_from_masters_1_bresp),
				       .v_from_masters_1_arready(fabric$v_from_masters_1_arready),
				       .v_from_masters_1_rvalid(fabric$v_from_masters_1_rvalid),
				       .v_from_masters_1_rid(fabric$v_from_masters_1_rid),
				       .v_from_masters_1_rdata(fabric$v_from_masters_1_rdata),
				       .v_from_masters_1_rresp(fabric$v_from_masters_1_rresp),
				       .v_from_masters_1_rlast(fabric$v_from_masters_1_rlast),
				       .v_to_slaves_0_awvalid(fabric$v_to_slaves_0_awvalid),
				       .v_to_slaves_0_awid(fabric$v_to_slaves_0_awid),
				       .v_to_slaves_0_awaddr(fabric$v_to_slaves_0_awaddr),
				       .v_to_slaves_0_awlen(fabric$v_to_slaves_0_awlen),
				       .v_to_slaves_0_awsize(fabric$v_to_slaves_0_awsize),
				       .v_to_slaves_0_awburst(fabric$v_to_slaves_0_awburst),
				       .v_to_slaves_0_awlock(fabric$v_to_slaves_0_awlock),
				       .v_to_slaves_0_awcache(fabric$v_to_slaves_0_awcache),
				       .v_to_slaves_0_awprot(fabric$v_to_slaves_0_awprot),
				       .v_to_slaves_0_awqos(fabric$v_to_slaves_0_awqos),
				       .v_to_slaves_0_awregion(fabric$v_to_slaves_0_awregion),
				       .v_to_slaves_0_wvalid(fabric$v_to_slaves_0_wvalid),
				       .v_to_slaves_0_wdata(fabric$v_to_slaves_0_wdata),
				       .v_to_slaves_0_wstrb(fabric$v_to_slaves_0_wstrb),
				       .v_to_slaves_0_wlast(fabric$v_to_slaves_0_wlast),
				       .v_to_slaves_0_bready(fabric$v_to_slaves_0_bready),
				       .v_to_slaves_0_arvalid(fabric$v_to_slaves_0_arvalid),
				       .v_to_slaves_0_arid(fabric$v_to_slaves_0_arid),
				       .v_to_slaves_0_araddr(fabric$v_to_slaves_0_araddr),
				       .v_to_slaves_0_arlen(fabric$v_to_slaves_0_arlen),
				       .v_to_slaves_0_arsize(fabric$v_to_slaves_0_arsize),
				       .v_to_slaves_0_arburst(fabric$v_to_slaves_0_arburst),
				       .v_to_slaves_0_arlock(fabric$v_to_slaves_0_arlock),
				       .v_to_slaves_0_arcache(fabric$v_to_slaves_0_arcache),
				       .v_to_slaves_0_arprot(fabric$v_to_slaves_0_arprot),
				       .v_to_slaves_0_arqos(fabric$v_to_slaves_0_arqos),
				       .v_to_slaves_0_arregion(fabric$v_to_slaves_0_arregion),
				       .v_to_slaves_0_rready(fabric$v_to_slaves_0_rready),
				       .v_to_slaves_1_awvalid(fabric$v_to_slaves_1_awvalid),
				       .v_to_slaves_1_awid(fabric$v_to_slaves_1_awid),
				       .v_to_slaves_1_awaddr(fabric$v_to_slaves_1_awaddr),
				       .v_to_slaves_1_awlen(fabric$v_to_slaves_1_awlen),
				       .v_to_slaves_1_awsize(fabric$v_to_slaves_1_awsize),
				       .v_to_slaves_1_awburst(fabric$v_to_slaves_1_awburst),
				       .v_to_slaves_1_awlock(fabric$v_to_slaves_1_awlock),
				       .v_to_slaves_1_awcache(fabric$v_to_slaves_1_awcache),
				       .v_to_slaves_1_awprot(fabric$v_to_slaves_1_awprot),
				       .v_to_slaves_1_awqos(fabric$v_to_slaves_1_awqos),
				       .v_to_slaves_1_awregion(fabric$v_to_slaves_1_awregion),
				       .v_to_slaves_1_wvalid(fabric$v_to_slaves_1_wvalid),
				       .v_to_slaves_1_wdata(fabric$v_to_slaves_1_wdata),
				       .v_to_slaves_1_wstrb(fabric$v_to_slaves_1_wstrb),
				       .v_to_slaves_1_wlast(fabric$v_to_slaves_1_wlast),
				       .v_to_slaves_1_bready(fabric$v_to_slaves_1_bready),
				       .v_to_slaves_1_arvalid(fabric$v_to_slaves_1_arvalid),
				       .v_to_slaves_1_arid(fabric$v_to_slaves_1_arid),
				       .v_to_slaves_1_araddr(fabric$v_to_slaves_1_araddr),
				       .v_to_slaves_1_arlen(fabric$v_to_slaves_1_arlen),
				       .v_to_slaves_1_arsize(fabric$v_to_slaves_1_arsize),
				       .v_to_slaves_1_arburst(fabric$v_to_slaves_1_arburst),
				       .v_to_slaves_1_arlock(fabric$v_to_slaves_1_arlock),
				       .v_to_slaves_1_arcache(fabric$v_to_slaves_1_arcache),
				       .v_to_slaves_1_arprot(fabric$v_to_slaves_1_arprot),
				       .v_to_slaves_1_arqos(fabric$v_to_slaves_1_arqos),
				       .v_to_slaves_1_arregion(fabric$v_to_slaves_1_arregion),
				       .v_to_slaves_1_rready(fabric$v_to_slaves_1_rready));

  // rule RL_rl_wr_addr_channel
  assign CAN_FIRE_RL_rl_wr_addr_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_addr_channel = 1'd1 ;

  // rule RL_rl_wr_data_channel
  assign CAN_FIRE_RL_rl_wr_data_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_data_channel = 1'd1 ;

  // rule RL_rl_wr_response_channel
  assign CAN_FIRE_RL_rl_wr_response_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_response_channel = 1'd1 ;

  // rule RL_rl_rd_addr_channel
  assign CAN_FIRE_RL_rl_rd_addr_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_addr_channel = 1'd1 ;

  // rule RL_rl_rd_data_channel
  assign CAN_FIRE_RL_rl_rd_data_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_data_channel = 1'd1 ;

  // register rg_ddr4s_ready
  assign rg_ddr4s_ready$D_IN = m_ddr4s_ready_ddr4s_ready ;
  assign rg_ddr4s_ready$EN = 1'd1 ;

  // register rg_glcount0
  assign rg_glcount0$D_IN = m_glcount0_glcount0 ;
  assign rg_glcount0$EN = 1'd1 ;

  // register rg_glcount1
  assign rg_glcount1$D_IN = m_glcount1_glcount1 ;
  assign rg_glcount1$EN = 1'd1 ;

  // register rg_shutdown_received
  assign rg_shutdown_received$D_IN = 1'b0 ;
  assign rg_shutdown_received$EN = 1'b0 ;

  // register rg_vdip
  assign rg_vdip$D_IN = m_vdip_vdip ;
  assign rg_vdip$EN = 1'd1 ;

  // register rg_vled
  assign rg_vled$D_IN = 16'h0 ;
  assign rg_vled$EN = 1'b0 ;

  // submodule adapter_AXI4L_S_to_AXI4_M
  assign adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_araddr = host_AXI4L_S_araddr ;
  assign adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_arprot = host_AXI4L_S_arprot ;
  assign adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_arvalid =
	     host_AXI4L_S_arvalid ;
  assign adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_awaddr = host_AXI4L_S_awaddr ;
  assign adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_awprot = host_AXI4L_S_awprot ;
  assign adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_awvalid =
	     host_AXI4L_S_awvalid ;
  assign adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_bready = host_AXI4L_S_bready ;
  assign adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_rready = host_AXI4L_S_rready ;
  assign adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_wdata = host_AXI4L_S_wdata ;
  assign adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_wstrb = host_AXI4L_S_wstrb ;
  assign adapter_AXI4L_S_to_AXI4_M$ifc_AXI4L_S_wvalid = host_AXI4L_S_wvalid ;
  assign adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_arready =
	     fabric$v_from_masters_1_arready ;
  assign adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_awready =
	     fabric$v_from_masters_1_awready ;
  assign adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_bid =
	     fabric$v_from_masters_1_bid ;
  assign adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_bresp =
	     fabric$v_from_masters_1_bresp ;
  assign adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_bvalid =
	     fabric$v_from_masters_1_bvalid ;
  assign adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_rdata =
	     fabric$v_from_masters_1_rdata ;
  assign adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_rid =
	     fabric$v_from_masters_1_rid ;
  assign adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_rlast =
	     fabric$v_from_masters_1_rlast ;
  assign adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_rresp =
	     fabric$v_from_masters_1_rresp ;
  assign adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_rvalid =
	     fabric$v_from_masters_1_rvalid ;
  assign adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_wready =
	     fabric$v_from_masters_1_wready ;

  // submodule fabric
  assign fabric$set_verbosity_verbosity = 4'h0 ;
  assign fabric$v_from_masters_0_araddr = host_AXI4_S_araddr ;
  assign fabric$v_from_masters_0_arburst = host_AXI4_S_arburst ;
  assign fabric$v_from_masters_0_arcache = host_AXI4_S_arcache ;
  assign fabric$v_from_masters_0_arid = host_AXI4_S_arid ;
  assign fabric$v_from_masters_0_arlen = host_AXI4_S_arlen ;
  assign fabric$v_from_masters_0_arlock = host_AXI4_S_arlock ;
  assign fabric$v_from_masters_0_arprot = host_AXI4_S_arprot ;
  assign fabric$v_from_masters_0_arqos = host_AXI4_S_arqos ;
  assign fabric$v_from_masters_0_arregion = host_AXI4_S_arregion ;
  assign fabric$v_from_masters_0_arsize = host_AXI4_S_arsize ;
  assign fabric$v_from_masters_0_arvalid = host_AXI4_S_arvalid ;
  assign fabric$v_from_masters_0_awaddr = host_AXI4_S_awaddr ;
  assign fabric$v_from_masters_0_awburst = host_AXI4_S_awburst ;
  assign fabric$v_from_masters_0_awcache = host_AXI4_S_awcache ;
  assign fabric$v_from_masters_0_awid = host_AXI4_S_awid ;
  assign fabric$v_from_masters_0_awlen = host_AXI4_S_awlen ;
  assign fabric$v_from_masters_0_awlock = host_AXI4_S_awlock ;
  assign fabric$v_from_masters_0_awprot = host_AXI4_S_awprot ;
  assign fabric$v_from_masters_0_awqos = host_AXI4_S_awqos ;
  assign fabric$v_from_masters_0_awregion = host_AXI4_S_awregion ;
  assign fabric$v_from_masters_0_awsize = host_AXI4_S_awsize ;
  assign fabric$v_from_masters_0_awvalid = host_AXI4_S_awvalid ;
  assign fabric$v_from_masters_0_bready = host_AXI4_S_bready ;
  assign fabric$v_from_masters_0_rready = host_AXI4_S_rready ;
  assign fabric$v_from_masters_0_wdata = host_AXI4_S_wdata ;
  assign fabric$v_from_masters_0_wlast = host_AXI4_S_wlast ;
  assign fabric$v_from_masters_0_wstrb = host_AXI4_S_wstrb ;
  assign fabric$v_from_masters_0_wvalid = host_AXI4_S_wvalid ;
  assign fabric$v_from_masters_1_araddr =
	     adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_araddr ;
  assign fabric$v_from_masters_1_arburst =
	     adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_arburst ;
  assign fabric$v_from_masters_1_arcache =
	     adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_arcache ;
  assign fabric$v_from_masters_1_arid =
	     adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_arid ;
  assign fabric$v_from_masters_1_arlen =
	     adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_arlen ;
  assign fabric$v_from_masters_1_arlock =
	     adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_arlock ;
  assign fabric$v_from_masters_1_arprot =
	     adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_arprot ;
  assign fabric$v_from_masters_1_arqos =
	     adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_arqos ;
  assign fabric$v_from_masters_1_arregion =
	     adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_arregion ;
  assign fabric$v_from_masters_1_arsize =
	     adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_arsize ;
  assign fabric$v_from_masters_1_arvalid =
	     adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_arvalid ;
  assign fabric$v_from_masters_1_awaddr =
	     adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_awaddr ;
  assign fabric$v_from_masters_1_awburst =
	     adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_awburst ;
  assign fabric$v_from_masters_1_awcache =
	     adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_awcache ;
  assign fabric$v_from_masters_1_awid =
	     adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_awid ;
  assign fabric$v_from_masters_1_awlen =
	     adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_awlen ;
  assign fabric$v_from_masters_1_awlock =
	     adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_awlock ;
  assign fabric$v_from_masters_1_awprot =
	     adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_awprot ;
  assign fabric$v_from_masters_1_awqos =
	     adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_awqos ;
  assign fabric$v_from_masters_1_awregion =
	     adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_awregion ;
  assign fabric$v_from_masters_1_awsize =
	     adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_awsize ;
  assign fabric$v_from_masters_1_awvalid =
	     adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_awvalid ;
  assign fabric$v_from_masters_1_bready =
	     adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_bready ;
  assign fabric$v_from_masters_1_rready =
	     adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_rready ;
  assign fabric$v_from_masters_1_wdata =
	     adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_wdata ;
  assign fabric$v_from_masters_1_wlast =
	     adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_wlast ;
  assign fabric$v_from_masters_1_wstrb =
	     adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_wstrb ;
  assign fabric$v_from_masters_1_wvalid =
	     adapter_AXI4L_S_to_AXI4_M$ifc_AXI4_M_wvalid ;
  assign fabric$v_to_slaves_0_arready = ddr4_A_M_arready ;
  assign fabric$v_to_slaves_0_awready = ddr4_A_M_awready ;
  assign fabric$v_to_slaves_0_bid = ddr4_A_M_bid ;
  assign fabric$v_to_slaves_0_bresp = ddr4_A_M_bresp ;
  assign fabric$v_to_slaves_0_bvalid = ddr4_A_M_bvalid ;
  assign fabric$v_to_slaves_0_rdata = ddr4_A_M_rdata ;
  assign fabric$v_to_slaves_0_rid = ddr4_A_M_rid ;
  assign fabric$v_to_slaves_0_rlast = ddr4_A_M_rlast ;
  assign fabric$v_to_slaves_0_rresp = ddr4_A_M_rresp ;
  assign fabric$v_to_slaves_0_rvalid = ddr4_A_M_rvalid ;
  assign fabric$v_to_slaves_0_wready = ddr4_A_M_wready ;
  assign fabric$v_to_slaves_1_arready = ddr4_B_M_arready ;
  assign fabric$v_to_slaves_1_awready = ddr4_B_M_awready ;
  assign fabric$v_to_slaves_1_bid = ddr4_B_M_bid ;
  assign fabric$v_to_slaves_1_bresp = ddr4_B_M_bresp ;
  assign fabric$v_to_slaves_1_bvalid = ddr4_B_M_bvalid ;
  assign fabric$v_to_slaves_1_rdata = ddr4_B_M_rdata ;
  assign fabric$v_to_slaves_1_rid = ddr4_B_M_rid ;
  assign fabric$v_to_slaves_1_rlast = ddr4_B_M_rlast ;
  assign fabric$v_to_slaves_1_rresp = ddr4_B_M_rresp ;
  assign fabric$v_to_slaves_1_rvalid = ddr4_B_M_rvalid ;
  assign fabric$v_to_slaves_1_wready = ddr4_B_M_wready ;
  assign fabric$EN_reset = 1'b0 ;
  assign fabric$EN_set_verbosity = 1'b0 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_ddr4s_ready <= `BSV_ASSIGNMENT_DELAY 4'd0;
	rg_glcount0 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_glcount1 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_shutdown_received <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_vdip <= `BSV_ASSIGNMENT_DELAY 16'd0;
	rg_vled <= `BSV_ASSIGNMENT_DELAY 16'd0;
      end
    else
      begin
        if (rg_ddr4s_ready$EN)
	  rg_ddr4s_ready <= `BSV_ASSIGNMENT_DELAY rg_ddr4s_ready$D_IN;
	if (rg_glcount0$EN)
	  rg_glcount0 <= `BSV_ASSIGNMENT_DELAY rg_glcount0$D_IN;
	if (rg_glcount1$EN)
	  rg_glcount1 <= `BSV_ASSIGNMENT_DELAY rg_glcount1$D_IN;
	if (rg_shutdown_received$EN)
	  rg_shutdown_received <= `BSV_ASSIGNMENT_DELAY
	      rg_shutdown_received$D_IN;
	if (rg_vdip$EN) rg_vdip <= `BSV_ASSIGNMENT_DELAY rg_vdip$D_IN;
	if (rg_vled$EN) rg_vled <= `BSV_ASSIGNMENT_DELAY rg_vled$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_ddr4s_ready = 4'hA;
    rg_glcount0 = 64'hAAAAAAAAAAAAAAAA;
    rg_glcount1 = 64'hAAAAAAAAAAAAAAAA;
    rg_shutdown_received = 1'h0;
    rg_vdip = 16'hAAAA;
    rg_vled = 16'hAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkBluPont_HW_Side

